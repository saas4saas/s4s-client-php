<?php
/**
 * Subscription
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * s4s-full
 *
 * description
 *
 * OpenAPI spec version: stable
 * Contact: rui.p.oliveira@impactinglabs.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Subscription Class Doc Comment
 *
 * @category    Class */
 // @description Model description
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Subscription implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Subscription';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'period' => 'string',
        'setup_fee' => '\Swagger\Client\Model\Price',
        'period_cost' => '\Swagger\Client\Model\Price',
        'when_pay' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'period' => 'period',
        'setup_fee' => 'setupFee',
        'period_cost' => 'periodCost',
        'when_pay' => 'whenPay'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'period' => 'setPeriod',
        'setup_fee' => 'setSetupFee',
        'period_cost' => 'setPeriodCost',
        'when_pay' => 'setWhenPay'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'period' => 'getPeriod',
        'setup_fee' => 'getSetupFee',
        'period_cost' => 'getPeriodCost',
        'when_pay' => 'getWhenPay'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const PERIOD_YEAR = 'Year';
    const PERIOD_MONTH = 'Month';
    const PERIOD_WEEK = 'Week';
    const PERIOD_DAY = 'Day';
    const WHEN_PAY_END_PERIOD = 'EndPeriod';
    const WHEN_PAY_START_PERIOD = 'StartPeriod';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getPeriodAllowableValues()
    {
        return [
            self::PERIOD_YEAR,
            self::PERIOD_MONTH,
            self::PERIOD_WEEK,
            self::PERIOD_DAY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getWhenPayAllowableValues()
    {
        return [
            self::WHEN_PAY_END_PERIOD,
            self::WHEN_PAY_START_PERIOD,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['period'] = isset($data['period']) ? $data['period'] : null;
        $this->container['setup_fee'] = isset($data['setup_fee']) ? $data['setup_fee'] : null;
        $this->container['period_cost'] = isset($data['period_cost']) ? $data['period_cost'] : null;
        $this->container['when_pay'] = isset($data['when_pay']) ? $data['when_pay'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        $allowed_values = array("Year", "Month", "Week", "Day");
        if (!in_array($this->container['period'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'period', must be one of #{allowed_values}.";
        }

        $allowed_values = array("EndPeriod", "StartPeriod");
        if (!in_array($this->container['when_pay'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'when_pay', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = array("Year", "Month", "Week", "Day");
        if (!in_array($this->container['period'], $allowed_values)) {
            return false;
        }
        $allowed_values = array("EndPeriod", "StartPeriod");
        if (!in_array($this->container['when_pay'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets period
     * @return string
     */
    public function getPeriod()
    {
        return $this->container['period'];
    }

    /**
     * Sets period
     * @param string $period
     * @return $this
     */
    public function setPeriod($period)
    {
        $allowed_values = array('Year', 'Month', 'Week', 'Day');
        if (!in_array($period, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'period', must be one of 'Year', 'Month', 'Week', 'Day'");
        }
        $this->container['period'] = $period;

        return $this;
    }

    /**
     * Gets setup_fee
     * @return \Swagger\Client\Model\Price
     */
    public function getSetupFee()
    {
        return $this->container['setup_fee'];
    }

    /**
     * Sets setup_fee
     * @param \Swagger\Client\Model\Price $setup_fee
     * @return $this
     */
    public function setSetupFee($setup_fee)
    {
        $this->container['setup_fee'] = $setup_fee;

        return $this;
    }

    /**
     * Gets period_cost
     * @return \Swagger\Client\Model\Price
     */
    public function getPeriodCost()
    {
        return $this->container['period_cost'];
    }

    /**
     * Sets period_cost
     * @param \Swagger\Client\Model\Price $period_cost
     * @return $this
     */
    public function setPeriodCost($period_cost)
    {
        $this->container['period_cost'] = $period_cost;

        return $this;
    }

    /**
     * Gets when_pay
     * @return string
     */
    public function getWhenPay()
    {
        return $this->container['when_pay'];
    }

    /**
     * Sets when_pay
     * @param string $when_pay
     * @return $this
     */
    public function setWhenPay($when_pay)
    {
        $allowed_values = array('EndPeriod', 'StartPeriod');
        if (!in_array($when_pay, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'when_pay', must be one of 'EndPeriod', 'StartPeriod'");
        }
        $this->container['when_pay'] = $when_pay;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


