<?php
/**
 * CustomerPack
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * s4s-full
 *
 * description
 *
 * OpenAPI spec version: stable
 * Contact: rui.p.oliveira@impactinglabs.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * CustomerPack Class Doc Comment
 *
 * @category    Class */
 // @description Model description
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CustomerPack implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CustomerPack';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'closed_time' => 'int',
        'state' => 'string',
        'resource_statu_list' => '\Swagger\Client\Model\ResourceStatus[]',
        'subscription_id' => 'string',
        'expiration_time_span' => 'int',
        'customer_id' => 'string',
        'id' => 'string',
        'exact_conf_id' => 'string',
        'pack_id' => 'string',
        'spent' => 'map[string,int]',
        'creation_time' => 'int'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'closed_time' => 'closedTime',
        'state' => 'state',
        'resource_statu_list' => 'resourceStatuList',
        'subscription_id' => 'subscriptionId',
        'expiration_time_span' => 'expirationTimeSpan',
        'customer_id' => 'customerId',
        'id' => 'id',
        'exact_conf_id' => 'exactConfId',
        'pack_id' => 'packId',
        'spent' => 'spent',
        'creation_time' => 'creationTime'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'closed_time' => 'setClosedTime',
        'state' => 'setState',
        'resource_statu_list' => 'setResourceStatuList',
        'subscription_id' => 'setSubscriptionId',
        'expiration_time_span' => 'setExpirationTimeSpan',
        'customer_id' => 'setCustomerId',
        'id' => 'setId',
        'exact_conf_id' => 'setExactConfId',
        'pack_id' => 'setPackId',
        'spent' => 'setSpent',
        'creation_time' => 'setCreationTime'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'closed_time' => 'getClosedTime',
        'state' => 'getState',
        'resource_statu_list' => 'getResourceStatuList',
        'subscription_id' => 'getSubscriptionId',
        'expiration_time_span' => 'getExpirationTimeSpan',
        'customer_id' => 'getCustomerId',
        'id' => 'getId',
        'exact_conf_id' => 'getExactConfId',
        'pack_id' => 'getPackId',
        'spent' => 'getSpent',
        'creation_time' => 'getCreationTime'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const STATE_HISTORY = 'History';
    const STATE_CLOSING = 'Closing';
    const STATE_ENJOY = 'Enjoy';
    const STATE_CREATING = 'Creating';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_HISTORY,
            self::STATE_CLOSING,
            self::STATE_ENJOY,
            self::STATE_CREATING,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['closed_time'] = isset($data['closed_time']) ? $data['closed_time'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['resource_statu_list'] = isset($data['resource_statu_list']) ? $data['resource_statu_list'] : null;
        $this->container['subscription_id'] = isset($data['subscription_id']) ? $data['subscription_id'] : null;
        $this->container['expiration_time_span'] = isset($data['expiration_time_span']) ? $data['expiration_time_span'] : null;
        $this->container['customer_id'] = isset($data['customer_id']) ? $data['customer_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['exact_conf_id'] = isset($data['exact_conf_id']) ? $data['exact_conf_id'] : null;
        $this->container['pack_id'] = isset($data['pack_id']) ? $data['pack_id'] : null;
        $this->container['spent'] = isset($data['spent']) ? $data['spent'] : null;
        $this->container['creation_time'] = isset($data['creation_time']) ? $data['creation_time'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        $allowed_values = array("History", "Closing", "Enjoy", "Creating");
        if (!in_array($this->container['state'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'state', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = array("History", "Closing", "Enjoy", "Creating");
        if (!in_array($this->container['state'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets closed_time
     * @return int
     */
    public function getClosedTime()
    {
        return $this->container['closed_time'];
    }

    /**
     * Sets closed_time
     * @param int $closed_time
     * @return $this
     */
    public function setClosedTime($closed_time)
    {
        $this->container['closed_time'] = $closed_time;

        return $this;
    }

    /**
     * Gets state
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     * @param string $state
     * @return $this
     */
    public function setState($state)
    {
        $allowed_values = array('History', 'Closing', 'Enjoy', 'Creating');
        if (!in_array($state, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'state', must be one of 'History', 'Closing', 'Enjoy', 'Creating'");
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets resource_statu_list
     * @return \Swagger\Client\Model\ResourceStatus[]
     */
    public function getResourceStatuList()
    {
        return $this->container['resource_statu_list'];
    }

    /**
     * Sets resource_statu_list
     * @param \Swagger\Client\Model\ResourceStatus[] $resource_statu_list
     * @return $this
     */
    public function setResourceStatuList($resource_statu_list)
    {
        $this->container['resource_statu_list'] = $resource_statu_list;

        return $this;
    }

    /**
     * Gets subscription_id
     * @return string
     */
    public function getSubscriptionId()
    {
        return $this->container['subscription_id'];
    }

    /**
     * Sets subscription_id
     * @param string $subscription_id
     * @return $this
     */
    public function setSubscriptionId($subscription_id)
    {
        $this->container['subscription_id'] = $subscription_id;

        return $this;
    }

    /**
     * Gets expiration_time_span
     * @return int
     */
    public function getExpirationTimeSpan()
    {
        return $this->container['expiration_time_span'];
    }

    /**
     * Sets expiration_time_span
     * @param int $expiration_time_span
     * @return $this
     */
    public function setExpirationTimeSpan($expiration_time_span)
    {
        $this->container['expiration_time_span'] = $expiration_time_span;

        return $this;
    }

    /**
     * Gets customer_id
     * @return string
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     * @param string $customer_id
     * @return $this
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets exact_conf_id
     * @return string
     */
    public function getExactConfId()
    {
        return $this->container['exact_conf_id'];
    }

    /**
     * Sets exact_conf_id
     * @param string $exact_conf_id
     * @return $this
     */
    public function setExactConfId($exact_conf_id)
    {
        $this->container['exact_conf_id'] = $exact_conf_id;

        return $this;
    }

    /**
     * Gets pack_id
     * @return string
     */
    public function getPackId()
    {
        return $this->container['pack_id'];
    }

    /**
     * Sets pack_id
     * @param string $pack_id
     * @return $this
     */
    public function setPackId($pack_id)
    {
        $this->container['pack_id'] = $pack_id;

        return $this;
    }

    /**
     * Gets spent
     * @return map[string,int]
     */
    public function getSpent()
    {
        return $this->container['spent'];
    }

    /**
     * Sets spent
     * @param map[string,int] $spent
     * @return $this
     */
    public function setSpent($spent)
    {
        $this->container['spent'] = $spent;

        return $this;
    }

    /**
     * Gets creation_time
     * @return int
     */
    public function getCreationTime()
    {
        return $this->container['creation_time'];
    }

    /**
     * Sets creation_time
     * @param int $creation_time
     * @return $this
     */
    public function setCreationTime($creation_time)
    {
        $this->container['creation_time'] = $creation_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


