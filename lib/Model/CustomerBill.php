<?php
/**
 * CustomerBill
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * s4s-full
 *
 * description
 *
 * OpenAPI spec version: stable
 * Contact: rui.p.oliveira@impactinglabs.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * CustomerBill Class Doc Comment
 *
 * @category    Class */
 // @description Model description
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CustomerBill implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CustomerBill';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'customer_plan_id' => 'string',
        'creation_timespan' => 'int',
        'las_update_timespan' => 'int',
        'customer_id' => 'string',
        'id' => 'string',
        'status' => 'string',
        'total_in_payment' => 'map[string,int]',
        'plan_id' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'customer_plan_id' => 'customerPlanId',
        'creation_timespan' => 'creationTimespan',
        'las_update_timespan' => 'lasUpdateTimespan',
        'customer_id' => 'customerId',
        'id' => 'id',
        'status' => 'status',
        'total_in_payment' => 'totalInPayment',
        'plan_id' => 'planId'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'customer_plan_id' => 'setCustomerPlanId',
        'creation_timespan' => 'setCreationTimespan',
        'las_update_timespan' => 'setLasUpdateTimespan',
        'customer_id' => 'setCustomerId',
        'id' => 'setId',
        'status' => 'setStatus',
        'total_in_payment' => 'setTotalInPayment',
        'plan_id' => 'setPlanId'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'customer_plan_id' => 'getCustomerPlanId',
        'creation_timespan' => 'getCreationTimespan',
        'las_update_timespan' => 'getLasUpdateTimespan',
        'customer_id' => 'getCustomerId',
        'id' => 'getId',
        'status' => 'getStatus',
        'total_in_payment' => 'getTotalInPayment',
        'plan_id' => 'getPlanId'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const STATUS_S3_FORGIVEN = 'S3Forgiven';
    const STATUS_S4_PAID = 'S4Paid';
    const STATUS_S1_WAITING_PAYMENT = 'S1WaitingPayment';
    const STATUS_S2_WAITING_PLAN_EXPIRATION = 'S2WaitingPlanExpiration';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_S3_FORGIVEN,
            self::STATUS_S4_PAID,
            self::STATUS_S1_WAITING_PAYMENT,
            self::STATUS_S2_WAITING_PLAN_EXPIRATION,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['customer_plan_id'] = isset($data['customer_plan_id']) ? $data['customer_plan_id'] : null;
        $this->container['creation_timespan'] = isset($data['creation_timespan']) ? $data['creation_timespan'] : null;
        $this->container['las_update_timespan'] = isset($data['las_update_timespan']) ? $data['las_update_timespan'] : null;
        $this->container['customer_id'] = isset($data['customer_id']) ? $data['customer_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['total_in_payment'] = isset($data['total_in_payment']) ? $data['total_in_payment'] : null;
        $this->container['plan_id'] = isset($data['plan_id']) ? $data['plan_id'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        $allowed_values = array("S3Forgiven", "S4Paid", "S1WaitingPayment", "S2WaitingPlanExpiration");
        if (!in_array($this->container['status'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'status', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = array("S3Forgiven", "S4Paid", "S1WaitingPayment", "S2WaitingPlanExpiration");
        if (!in_array($this->container['status'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets customer_plan_id
     * @return string
     */
    public function getCustomerPlanId()
    {
        return $this->container['customer_plan_id'];
    }

    /**
     * Sets customer_plan_id
     * @param string $customer_plan_id
     * @return $this
     */
    public function setCustomerPlanId($customer_plan_id)
    {
        $this->container['customer_plan_id'] = $customer_plan_id;

        return $this;
    }

    /**
     * Gets creation_timespan
     * @return int
     */
    public function getCreationTimespan()
    {
        return $this->container['creation_timespan'];
    }

    /**
     * Sets creation_timespan
     * @param int $creation_timespan
     * @return $this
     */
    public function setCreationTimespan($creation_timespan)
    {
        $this->container['creation_timespan'] = $creation_timespan;

        return $this;
    }

    /**
     * Gets las_update_timespan
     * @return int
     */
    public function getLasUpdateTimespan()
    {
        return $this->container['las_update_timespan'];
    }

    /**
     * Sets las_update_timespan
     * @param int $las_update_timespan
     * @return $this
     */
    public function setLasUpdateTimespan($las_update_timespan)
    {
        $this->container['las_update_timespan'] = $las_update_timespan;

        return $this;
    }

    /**
     * Gets customer_id
     * @return string
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     * @param string $customer_id
     * @return $this
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status
     * @return $this
     */
    public function setStatus($status)
    {
        $allowed_values = array('S3Forgiven', 'S4Paid', 'S1WaitingPayment', 'S2WaitingPlanExpiration');
        if (!in_array($status, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'status', must be one of 'S3Forgiven', 'S4Paid', 'S1WaitingPayment', 'S2WaitingPlanExpiration'");
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets total_in_payment
     * @return map[string,int]
     */
    public function getTotalInPayment()
    {
        return $this->container['total_in_payment'];
    }

    /**
     * Sets total_in_payment
     * @param map[string,int] $total_in_payment
     * @return $this
     */
    public function setTotalInPayment($total_in_payment)
    {
        $this->container['total_in_payment'] = $total_in_payment;

        return $this;
    }

    /**
     * Gets plan_id
     * @return string
     */
    public function getPlanId()
    {
        return $this->container['plan_id'];
    }

    /**
     * Sets plan_id
     * @param string $plan_id
     * @return $this
     */
    public function setPlanId($plan_id)
    {
        $this->container['plan_id'] = $plan_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


