<?php
/**
 * PricingTable2Plan
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * s4s-full
 *
 * description
 *
 * OpenAPI spec version: stable
 * Contact: rui.p.oliveira@impactinglabs.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * PricingTable2Plan Class Doc Comment
 *
 * @category    Class */
 // @description Model description
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PricingTable2Plan implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'PricingTable2Plan';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'name' => 'string',
        'cost_main' => '\Swagger\Client\Model\PricingTablePlanCost',
        'description' => 'string',
        'require_payment_method' => 'bool',
        'pack_id' => 'string',
        'typ' => 'string',
        'resources' => '\Swagger\Client\Model\PricingTableResource[]',
        'cost_list' => '\Swagger\Client\Model\PricingTablePlanCost[]',
        'plan_id' => 'string',
        'subscribe_url' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'name' => 'name',
        'cost_main' => 'costMain',
        'description' => 'description',
        'require_payment_method' => 'requirePaymentMethod',
        'pack_id' => 'packId',
        'typ' => 'typ',
        'resources' => 'resources',
        'cost_list' => 'costList',
        'plan_id' => 'planId',
        'subscribe_url' => 'subscribeUrl'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'name' => 'setName',
        'cost_main' => 'setCostMain',
        'description' => 'setDescription',
        'require_payment_method' => 'setRequirePaymentMethod',
        'pack_id' => 'setPackId',
        'typ' => 'setTyp',
        'resources' => 'setResources',
        'cost_list' => 'setCostList',
        'plan_id' => 'setPlanId',
        'subscribe_url' => 'setSubscribeUrl'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'name' => 'getName',
        'cost_main' => 'getCostMain',
        'description' => 'getDescription',
        'require_payment_method' => 'getRequirePaymentMethod',
        'pack_id' => 'getPackId',
        'typ' => 'getTyp',
        'resources' => 'getResources',
        'cost_list' => 'getCostList',
        'plan_id' => 'getPlanId',
        'subscribe_url' => 'getSubscribeUrl'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const TYP_ONE_TIME_PAY = 'OneTimePay';
    const TYP_SUBSCRIPTION = 'Subscription';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTypAllowableValues()
    {
        return [
            self::TYP_ONE_TIME_PAY,
            self::TYP_SUBSCRIPTION,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['cost_main'] = isset($data['cost_main']) ? $data['cost_main'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['require_payment_method'] = isset($data['require_payment_method']) ? $data['require_payment_method'] : null;
        $this->container['pack_id'] = isset($data['pack_id']) ? $data['pack_id'] : null;
        $this->container['typ'] = isset($data['typ']) ? $data['typ'] : null;
        $this->container['resources'] = isset($data['resources']) ? $data['resources'] : null;
        $this->container['cost_list'] = isset($data['cost_list']) ? $data['cost_list'] : null;
        $this->container['plan_id'] = isset($data['plan_id']) ? $data['plan_id'] : null;
        $this->container['subscribe_url'] = isset($data['subscribe_url']) ? $data['subscribe_url'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        $allowed_values = array("OneTimePay", "Subscription");
        if (!in_array($this->container['typ'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'typ', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = array("OneTimePay", "Subscription");
        if (!in_array($this->container['typ'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets cost_main
     * @return \Swagger\Client\Model\PricingTablePlanCost
     */
    public function getCostMain()
    {
        return $this->container['cost_main'];
    }

    /**
     * Sets cost_main
     * @param \Swagger\Client\Model\PricingTablePlanCost $cost_main
     * @return $this
     */
    public function setCostMain($cost_main)
    {
        $this->container['cost_main'] = $cost_main;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets require_payment_method
     * @return bool
     */
    public function getRequirePaymentMethod()
    {
        return $this->container['require_payment_method'];
    }

    /**
     * Sets require_payment_method
     * @param bool $require_payment_method
     * @return $this
     */
    public function setRequirePaymentMethod($require_payment_method)
    {
        $this->container['require_payment_method'] = $require_payment_method;

        return $this;
    }

    /**
     * Gets pack_id
     * @return string
     */
    public function getPackId()
    {
        return $this->container['pack_id'];
    }

    /**
     * Sets pack_id
     * @param string $pack_id
     * @return $this
     */
    public function setPackId($pack_id)
    {
        $this->container['pack_id'] = $pack_id;

        return $this;
    }

    /**
     * Gets typ
     * @return string
     */
    public function getTyp()
    {
        return $this->container['typ'];
    }

    /**
     * Sets typ
     * @param string $typ
     * @return $this
     */
    public function setTyp($typ)
    {
        $allowed_values = array('OneTimePay', 'Subscription');
        if (!in_array($typ, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'typ', must be one of 'OneTimePay', 'Subscription'");
        }
        $this->container['typ'] = $typ;

        return $this;
    }

    /**
     * Gets resources
     * @return \Swagger\Client\Model\PricingTableResource[]
     */
    public function getResources()
    {
        return $this->container['resources'];
    }

    /**
     * Sets resources
     * @param \Swagger\Client\Model\PricingTableResource[] $resources
     * @return $this
     */
    public function setResources($resources)
    {
        $this->container['resources'] = $resources;

        return $this;
    }

    /**
     * Gets cost_list
     * @return \Swagger\Client\Model\PricingTablePlanCost[]
     */
    public function getCostList()
    {
        return $this->container['cost_list'];
    }

    /**
     * Sets cost_list
     * @param \Swagger\Client\Model\PricingTablePlanCost[] $cost_list
     * @return $this
     */
    public function setCostList($cost_list)
    {
        $this->container['cost_list'] = $cost_list;

        return $this;
    }

    /**
     * Gets plan_id
     * @return string
     */
    public function getPlanId()
    {
        return $this->container['plan_id'];
    }

    /**
     * Sets plan_id
     * @param string $plan_id
     * @return $this
     */
    public function setPlanId($plan_id)
    {
        $this->container['plan_id'] = $plan_id;

        return $this;
    }

    /**
     * Gets subscribe_url
     * @return string
     */
    public function getSubscribeUrl()
    {
        return $this->container['subscribe_url'];
    }

    /**
     * Sets subscribe_url
     * @param string $subscribe_url
     * @return $this
     */
    public function setSubscribeUrl($subscribe_url)
    {
        $this->container['subscribe_url'] = $subscribe_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


