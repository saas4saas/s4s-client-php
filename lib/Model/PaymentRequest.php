<?php
/**
 * PaymentRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * s4s-full
 *
 * description
 *
 * OpenAPI spec version: stable
 * Contact: rui.p.oliveira@impactinglabs.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * PaymentRequest Class Doc Comment
 *
 * @category    Class */
 // @description Model description
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PaymentRequest implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'PaymentRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'creation_timespan' => 'int',
        'paid_timespan' => 'int',
        'state' => 'string',
        'what_pays' => 'map[string,int]',
        'price' => '\Swagger\Client\Model\Price',
        'bill_id' => 'string',
        'customer_id' => 'string',
        'id' => 'string',
        'stripe_charge_id' => 'string',
        'currency' => 'string',
        'value' => 'int'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'creation_timespan' => 'creationTimespan',
        'paid_timespan' => 'paidTimespan',
        'state' => 'state',
        'what_pays' => 'whatPays',
        'price' => 'price',
        'bill_id' => 'billId',
        'customer_id' => 'customerId',
        'id' => 'id',
        'stripe_charge_id' => 'stripeChargeId',
        'currency' => 'currency',
        'value' => 'value'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'creation_timespan' => 'setCreationTimespan',
        'paid_timespan' => 'setPaidTimespan',
        'state' => 'setState',
        'what_pays' => 'setWhatPays',
        'price' => 'setPrice',
        'bill_id' => 'setBillId',
        'customer_id' => 'setCustomerId',
        'id' => 'setId',
        'stripe_charge_id' => 'setStripeChargeId',
        'currency' => 'setCurrency',
        'value' => 'setValue'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'creation_timespan' => 'getCreationTimespan',
        'paid_timespan' => 'getPaidTimespan',
        'state' => 'getState',
        'what_pays' => 'getWhatPays',
        'price' => 'getPrice',
        'bill_id' => 'getBillId',
        'customer_id' => 'getCustomerId',
        'id' => 'getId',
        'stripe_charge_id' => 'getStripeChargeId',
        'currency' => 'getCurrency',
        'value' => 'getValue'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const STATE_STATUS2_WAIT_PAYMENT = 'status2WaitPayment';
    const STATE_STATUS3_CANCELED = 'status3Canceled';
    const STATE_STATUS4_PAID = 'status4Paid';
    const STATE_STATUS1_FAILED = 'status1Failed';
    const STATE_STATUS3_PAID = 'status3Paid';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_STATUS2_WAIT_PAYMENT,
            self::STATE_STATUS3_CANCELED,
            self::STATE_STATUS4_PAID,
            self::STATE_STATUS1_FAILED,
            self::STATE_STATUS3_PAID,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['creation_timespan'] = isset($data['creation_timespan']) ? $data['creation_timespan'] : null;
        $this->container['paid_timespan'] = isset($data['paid_timespan']) ? $data['paid_timespan'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['what_pays'] = isset($data['what_pays']) ? $data['what_pays'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['bill_id'] = isset($data['bill_id']) ? $data['bill_id'] : null;
        $this->container['customer_id'] = isset($data['customer_id']) ? $data['customer_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['stripe_charge_id'] = isset($data['stripe_charge_id']) ? $data['stripe_charge_id'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        $allowed_values = array("status2WaitPayment", "status3Canceled", "status4Paid", "status1Failed", "status3Paid");
        if (!in_array($this->container['state'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'state', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = array("status2WaitPayment", "status3Canceled", "status4Paid", "status1Failed", "status3Paid");
        if (!in_array($this->container['state'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets creation_timespan
     * @return int
     */
    public function getCreationTimespan()
    {
        return $this->container['creation_timespan'];
    }

    /**
     * Sets creation_timespan
     * @param int $creation_timespan
     * @return $this
     */
    public function setCreationTimespan($creation_timespan)
    {
        $this->container['creation_timespan'] = $creation_timespan;

        return $this;
    }

    /**
     * Gets paid_timespan
     * @return int
     */
    public function getPaidTimespan()
    {
        return $this->container['paid_timespan'];
    }

    /**
     * Sets paid_timespan
     * @param int $paid_timespan
     * @return $this
     */
    public function setPaidTimespan($paid_timespan)
    {
        $this->container['paid_timespan'] = $paid_timespan;

        return $this;
    }

    /**
     * Gets state
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     * @param string $state
     * @return $this
     */
    public function setState($state)
    {
        $allowed_values = array('status2WaitPayment', 'status3Canceled', 'status4Paid', 'status1Failed', 'status3Paid');
        if (!in_array($state, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'state', must be one of 'status2WaitPayment', 'status3Canceled', 'status4Paid', 'status1Failed', 'status3Paid'");
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets what_pays
     * @return map[string,int]
     */
    public function getWhatPays()
    {
        return $this->container['what_pays'];
    }

    /**
     * Sets what_pays
     * @param map[string,int] $what_pays
     * @return $this
     */
    public function setWhatPays($what_pays)
    {
        $this->container['what_pays'] = $what_pays;

        return $this;
    }

    /**
     * Gets price
     * @return \Swagger\Client\Model\Price
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     * @param \Swagger\Client\Model\Price $price
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets bill_id
     * @return string
     */
    public function getBillId()
    {
        return $this->container['bill_id'];
    }

    /**
     * Sets bill_id
     * @param string $bill_id
     * @return $this
     */
    public function setBillId($bill_id)
    {
        $this->container['bill_id'] = $bill_id;

        return $this;
    }

    /**
     * Gets customer_id
     * @return string
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     * @param string $customer_id
     * @return $this
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets stripe_charge_id
     * @return string
     */
    public function getStripeChargeId()
    {
        return $this->container['stripe_charge_id'];
    }

    /**
     * Sets stripe_charge_id
     * @param string $stripe_charge_id
     * @return $this
     */
    public function setStripeChargeId($stripe_charge_id)
    {
        $this->container['stripe_charge_id'] = $stripe_charge_id;

        return $this;
    }

    /**
     * Gets currency
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     * @param string $currency
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets value
     * @return int
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     * @param int $value
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


