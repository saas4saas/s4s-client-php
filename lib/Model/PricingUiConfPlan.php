<?php
/**
 * PricingUiConfPlan
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * s4s-full
 *
 * description
 *
 * OpenAPI spec version: stable
 * Contact: rui.p.oliveira@impactinglabs.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * PricingUiConfPlan Class Doc Comment
 *
 * @category    Class */
 // @description Model description
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PricingUiConfPlan implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'PricingUiConfPlan';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'main_price' => 'string',
        'id' => 'string',
        'order' => 'int',
        'is_visible' => 'bool',
        'main_variable_cost' => 'string',
        'period' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'main_price' => 'mainPrice',
        'id' => 'id',
        'order' => 'order',
        'is_visible' => 'isVisible',
        'main_variable_cost' => 'mainVariableCost',
        'period' => 'period'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'main_price' => 'setMainPrice',
        'id' => 'setId',
        'order' => 'setOrder',
        'is_visible' => 'setIsVisible',
        'main_variable_cost' => 'setMainVariableCost',
        'period' => 'setPeriod'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'main_price' => 'getMainPrice',
        'id' => 'getId',
        'order' => 'getOrder',
        'is_visible' => 'getIsVisible',
        'main_variable_cost' => 'getMainVariableCost',
        'period' => 'getPeriod'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const MAIN_PRICE_VARIABLE_COST = 'VariableCost';
    const MAIN_PRICE_PERIODIC_COST = 'PeriodicCost';
    const MAIN_PRICE_SETUP = 'Setup';
    const MAIN_PRICE_COST = 'Cost';
    const PERIOD_YEAR = 'Year';
    const PERIOD_MONTH = 'Month';
    const PERIOD_WEEK = 'Week';
    const PERIOD_DAY = 'Day';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getMainPriceAllowableValues()
    {
        return [
            self::MAIN_PRICE_VARIABLE_COST,
            self::MAIN_PRICE_PERIODIC_COST,
            self::MAIN_PRICE_SETUP,
            self::MAIN_PRICE_COST,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getPeriodAllowableValues()
    {
        return [
            self::PERIOD_YEAR,
            self::PERIOD_MONTH,
            self::PERIOD_WEEK,
            self::PERIOD_DAY,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['main_price'] = isset($data['main_price']) ? $data['main_price'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['order'] = isset($data['order']) ? $data['order'] : null;
        $this->container['is_visible'] = isset($data['is_visible']) ? $data['is_visible'] : null;
        $this->container['main_variable_cost'] = isset($data['main_variable_cost']) ? $data['main_variable_cost'] : null;
        $this->container['period'] = isset($data['period']) ? $data['period'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        $allowed_values = array("VariableCost", "PeriodicCost", "Setup", "Cost");
        if (!in_array($this->container['main_price'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'main_price', must be one of #{allowed_values}.";
        }

        $allowed_values = array("Year", "Month", "Week", "Day");
        if (!in_array($this->container['period'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'period', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = array("VariableCost", "PeriodicCost", "Setup", "Cost");
        if (!in_array($this->container['main_price'], $allowed_values)) {
            return false;
        }
        $allowed_values = array("Year", "Month", "Week", "Day");
        if (!in_array($this->container['period'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets main_price
     * @return string
     */
    public function getMainPrice()
    {
        return $this->container['main_price'];
    }

    /**
     * Sets main_price
     * @param string $main_price
     * @return $this
     */
    public function setMainPrice($main_price)
    {
        $allowed_values = array('VariableCost', 'PeriodicCost', 'Setup', 'Cost');
        if (!in_array($main_price, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'main_price', must be one of 'VariableCost', 'PeriodicCost', 'Setup', 'Cost'");
        }
        $this->container['main_price'] = $main_price;

        return $this;
    }

    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets order
     * @return int
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     * @param int $order
     * @return $this
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets is_visible
     * @return bool
     */
    public function getIsVisible()
    {
        return $this->container['is_visible'];
    }

    /**
     * Sets is_visible
     * @param bool $is_visible
     * @return $this
     */
    public function setIsVisible($is_visible)
    {
        $this->container['is_visible'] = $is_visible;

        return $this;
    }

    /**
     * Gets main_variable_cost
     * @return string
     */
    public function getMainVariableCost()
    {
        return $this->container['main_variable_cost'];
    }

    /**
     * Sets main_variable_cost
     * @param string $main_variable_cost
     * @return $this
     */
    public function setMainVariableCost($main_variable_cost)
    {
        $this->container['main_variable_cost'] = $main_variable_cost;

        return $this;
    }

    /**
     * Gets period
     * @return string
     */
    public function getPeriod()
    {
        return $this->container['period'];
    }

    /**
     * Sets period
     * @param string $period
     * @return $this
     */
    public function setPeriod($period)
    {
        $allowed_values = array('Year', 'Month', 'Week', 'Day');
        if (!in_array($period, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'period', must be one of 'Year', 'Month', 'Week', 'Day'");
        }
        $this->container['period'] = $period;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


