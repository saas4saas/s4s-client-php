<?php
/**
 * Plan
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * s4s-full
 *
 * description
 *
 * OpenAPI spec version: stable
 * Contact: rui.p.oliveira@impactinglabs.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Plan Class Doc Comment
 *
 * @category    Class */
 // @description Model description
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Plan implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Plan';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'variable_cost' => 'map[string,\Swagger\Client\Model\VariableCost]',
        'name' => 'string',
        'one_time_pay' => '\Swagger\Client\Model\OneTimePay',
        'has_variable_cost' => 'bool',
        'description' => 'string',
        'subscription' => '\Swagger\Client\Model\Subscription',
        'before_plan_id' => 'string',
        'on_expiraty_next_plan_id' => 'string',
        'upgrade_level' => 'int',
        'require_payment_method' => 'bool',
        'id' => 'string',
        'pack_id' => 'string',
        'typ' => 'string',
        'ui_order' => 'int',
        'family' => 'string',
        'ui_visible' => 'bool',
        'withfamily' => 'bool',
        'variable_cost_when_pay' => 'string',
        'one_time_plan' => 'bool'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'variable_cost' => 'variableCost',
        'name' => 'name',
        'one_time_pay' => 'oneTimePay',
        'has_variable_cost' => 'hasVariableCost',
        'description' => 'description',
        'subscription' => 'subscription',
        'before_plan_id' => 'beforePlanId',
        'on_expiraty_next_plan_id' => 'onExpiratyNextPlanId',
        'upgrade_level' => 'upgradeLevel',
        'require_payment_method' => 'requirePaymentMethod',
        'id' => 'id',
        'pack_id' => 'packId',
        'typ' => 'typ',
        'ui_order' => 'uiOrder',
        'family' => 'family',
        'ui_visible' => 'uiVisible',
        'withfamily' => 'withfamily',
        'variable_cost_when_pay' => 'variableCostWhenPay',
        'one_time_plan' => 'oneTimePlan'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'variable_cost' => 'setVariableCost',
        'name' => 'setName',
        'one_time_pay' => 'setOneTimePay',
        'has_variable_cost' => 'setHasVariableCost',
        'description' => 'setDescription',
        'subscription' => 'setSubscription',
        'before_plan_id' => 'setBeforePlanId',
        'on_expiraty_next_plan_id' => 'setOnExpiratyNextPlanId',
        'upgrade_level' => 'setUpgradeLevel',
        'require_payment_method' => 'setRequirePaymentMethod',
        'id' => 'setId',
        'pack_id' => 'setPackId',
        'typ' => 'setTyp',
        'ui_order' => 'setUiOrder',
        'family' => 'setFamily',
        'ui_visible' => 'setUiVisible',
        'withfamily' => 'setWithfamily',
        'variable_cost_when_pay' => 'setVariableCostWhenPay',
        'one_time_plan' => 'setOneTimePlan'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'variable_cost' => 'getVariableCost',
        'name' => 'getName',
        'one_time_pay' => 'getOneTimePay',
        'has_variable_cost' => 'getHasVariableCost',
        'description' => 'getDescription',
        'subscription' => 'getSubscription',
        'before_plan_id' => 'getBeforePlanId',
        'on_expiraty_next_plan_id' => 'getOnExpiratyNextPlanId',
        'upgrade_level' => 'getUpgradeLevel',
        'require_payment_method' => 'getRequirePaymentMethod',
        'id' => 'getId',
        'pack_id' => 'getPackId',
        'typ' => 'getTyp',
        'ui_order' => 'getUiOrder',
        'family' => 'getFamily',
        'ui_visible' => 'getUiVisible',
        'withfamily' => 'getWithfamily',
        'variable_cost_when_pay' => 'getVariableCostWhenPay',
        'one_time_plan' => 'getOneTimePlan'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const TYP_ONE_TIME_PAY = 'OneTimePay';
    const TYP_SUBSCRIPTION = 'Subscription';
    const VARIABLE_COST_WHEN_PAY_EACH_END_PERIOD = 'EachEndPeriod';
    const VARIABLE_COST_WHEN_PAY_EACH_MONTH = 'EachMonth';
    const VARIABLE_COST_WHEN_PAY_EACH_WEEK = 'EachWeek';
    const VARIABLE_COST_WHEN_PAY_EACH_DAY = 'EachDay';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTypAllowableValues()
    {
        return [
            self::TYP_ONE_TIME_PAY,
            self::TYP_SUBSCRIPTION,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getVariableCostWhenPayAllowableValues()
    {
        return [
            self::VARIABLE_COST_WHEN_PAY_EACH_END_PERIOD,
            self::VARIABLE_COST_WHEN_PAY_EACH_MONTH,
            self::VARIABLE_COST_WHEN_PAY_EACH_WEEK,
            self::VARIABLE_COST_WHEN_PAY_EACH_DAY,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['variable_cost'] = isset($data['variable_cost']) ? $data['variable_cost'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['one_time_pay'] = isset($data['one_time_pay']) ? $data['one_time_pay'] : null;
        $this->container['has_variable_cost'] = isset($data['has_variable_cost']) ? $data['has_variable_cost'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['subscription'] = isset($data['subscription']) ? $data['subscription'] : null;
        $this->container['before_plan_id'] = isset($data['before_plan_id']) ? $data['before_plan_id'] : null;
        $this->container['on_expiraty_next_plan_id'] = isset($data['on_expiraty_next_plan_id']) ? $data['on_expiraty_next_plan_id'] : null;
        $this->container['upgrade_level'] = isset($data['upgrade_level']) ? $data['upgrade_level'] : null;
        $this->container['require_payment_method'] = isset($data['require_payment_method']) ? $data['require_payment_method'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['pack_id'] = isset($data['pack_id']) ? $data['pack_id'] : null;
        $this->container['typ'] = isset($data['typ']) ? $data['typ'] : null;
        $this->container['ui_order'] = isset($data['ui_order']) ? $data['ui_order'] : null;
        $this->container['family'] = isset($data['family']) ? $data['family'] : null;
        $this->container['ui_visible'] = isset($data['ui_visible']) ? $data['ui_visible'] : null;
        $this->container['withfamily'] = isset($data['withfamily']) ? $data['withfamily'] : null;
        $this->container['variable_cost_when_pay'] = isset($data['variable_cost_when_pay']) ? $data['variable_cost_when_pay'] : null;
        $this->container['one_time_plan'] = isset($data['one_time_plan']) ? $data['one_time_plan'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        $allowed_values = array("OneTimePay", "Subscription");
        if (!in_array($this->container['typ'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'typ', must be one of #{allowed_values}.";
        }

        $allowed_values = array("EachEndPeriod", "EachMonth", "EachWeek", "EachDay");
        if (!in_array($this->container['variable_cost_when_pay'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'variable_cost_when_pay', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = array("OneTimePay", "Subscription");
        if (!in_array($this->container['typ'], $allowed_values)) {
            return false;
        }
        $allowed_values = array("EachEndPeriod", "EachMonth", "EachWeek", "EachDay");
        if (!in_array($this->container['variable_cost_when_pay'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets variable_cost
     * @return map[string,\Swagger\Client\Model\VariableCost]
     */
    public function getVariableCost()
    {
        return $this->container['variable_cost'];
    }

    /**
     * Sets variable_cost
     * @param map[string,\Swagger\Client\Model\VariableCost] $variable_cost
     * @return $this
     */
    public function setVariableCost($variable_cost)
    {
        $this->container['variable_cost'] = $variable_cost;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets one_time_pay
     * @return \Swagger\Client\Model\OneTimePay
     */
    public function getOneTimePay()
    {
        return $this->container['one_time_pay'];
    }

    /**
     * Sets one_time_pay
     * @param \Swagger\Client\Model\OneTimePay $one_time_pay
     * @return $this
     */
    public function setOneTimePay($one_time_pay)
    {
        $this->container['one_time_pay'] = $one_time_pay;

        return $this;
    }

    /**
     * Gets has_variable_cost
     * @return bool
     */
    public function getHasVariableCost()
    {
        return $this->container['has_variable_cost'];
    }

    /**
     * Sets has_variable_cost
     * @param bool $has_variable_cost
     * @return $this
     */
    public function setHasVariableCost($has_variable_cost)
    {
        $this->container['has_variable_cost'] = $has_variable_cost;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets subscription
     * @return \Swagger\Client\Model\Subscription
     */
    public function getSubscription()
    {
        return $this->container['subscription'];
    }

    /**
     * Sets subscription
     * @param \Swagger\Client\Model\Subscription $subscription
     * @return $this
     */
    public function setSubscription($subscription)
    {
        $this->container['subscription'] = $subscription;

        return $this;
    }

    /**
     * Gets before_plan_id
     * @return string
     */
    public function getBeforePlanId()
    {
        return $this->container['before_plan_id'];
    }

    /**
     * Sets before_plan_id
     * @param string $before_plan_id
     * @return $this
     */
    public function setBeforePlanId($before_plan_id)
    {
        $this->container['before_plan_id'] = $before_plan_id;

        return $this;
    }

    /**
     * Gets on_expiraty_next_plan_id
     * @return string
     */
    public function getOnExpiratyNextPlanId()
    {
        return $this->container['on_expiraty_next_plan_id'];
    }

    /**
     * Sets on_expiraty_next_plan_id
     * @param string $on_expiraty_next_plan_id
     * @return $this
     */
    public function setOnExpiratyNextPlanId($on_expiraty_next_plan_id)
    {
        $this->container['on_expiraty_next_plan_id'] = $on_expiraty_next_plan_id;

        return $this;
    }

    /**
     * Gets upgrade_level
     * @return int
     */
    public function getUpgradeLevel()
    {
        return $this->container['upgrade_level'];
    }

    /**
     * Sets upgrade_level
     * @param int $upgrade_level
     * @return $this
     */
    public function setUpgradeLevel($upgrade_level)
    {
        $this->container['upgrade_level'] = $upgrade_level;

        return $this;
    }

    /**
     * Gets require_payment_method
     * @return bool
     */
    public function getRequirePaymentMethod()
    {
        return $this->container['require_payment_method'];
    }

    /**
     * Sets require_payment_method
     * @param bool $require_payment_method
     * @return $this
     */
    public function setRequirePaymentMethod($require_payment_method)
    {
        $this->container['require_payment_method'] = $require_payment_method;

        return $this;
    }

    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets pack_id
     * @return string
     */
    public function getPackId()
    {
        return $this->container['pack_id'];
    }

    /**
     * Sets pack_id
     * @param string $pack_id
     * @return $this
     */
    public function setPackId($pack_id)
    {
        $this->container['pack_id'] = $pack_id;

        return $this;
    }

    /**
     * Gets typ
     * @return string
     */
    public function getTyp()
    {
        return $this->container['typ'];
    }

    /**
     * Sets typ
     * @param string $typ
     * @return $this
     */
    public function setTyp($typ)
    {
        $allowed_values = array('OneTimePay', 'Subscription');
        if (!in_array($typ, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'typ', must be one of 'OneTimePay', 'Subscription'");
        }
        $this->container['typ'] = $typ;

        return $this;
    }

    /**
     * Gets ui_order
     * @return int
     */
    public function getUiOrder()
    {
        return $this->container['ui_order'];
    }

    /**
     * Sets ui_order
     * @param int $ui_order
     * @return $this
     */
    public function setUiOrder($ui_order)
    {
        $this->container['ui_order'] = $ui_order;

        return $this;
    }

    /**
     * Gets family
     * @return string
     */
    public function getFamily()
    {
        return $this->container['family'];
    }

    /**
     * Sets family
     * @param string $family
     * @return $this
     */
    public function setFamily($family)
    {
        $this->container['family'] = $family;

        return $this;
    }

    /**
     * Gets ui_visible
     * @return bool
     */
    public function getUiVisible()
    {
        return $this->container['ui_visible'];
    }

    /**
     * Sets ui_visible
     * @param bool $ui_visible
     * @return $this
     */
    public function setUiVisible($ui_visible)
    {
        $this->container['ui_visible'] = $ui_visible;

        return $this;
    }

    /**
     * Gets withfamily
     * @return bool
     */
    public function getWithfamily()
    {
        return $this->container['withfamily'];
    }

    /**
     * Sets withfamily
     * @param bool $withfamily
     * @return $this
     */
    public function setWithfamily($withfamily)
    {
        $this->container['withfamily'] = $withfamily;

        return $this;
    }

    /**
     * Gets variable_cost_when_pay
     * @return string
     */
    public function getVariableCostWhenPay()
    {
        return $this->container['variable_cost_when_pay'];
    }

    /**
     * Sets variable_cost_when_pay
     * @param string $variable_cost_when_pay
     * @return $this
     */
    public function setVariableCostWhenPay($variable_cost_when_pay)
    {
        $allowed_values = array('EachEndPeriod', 'EachMonth', 'EachWeek', 'EachDay');
        if (!in_array($variable_cost_when_pay, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'variable_cost_when_pay', must be one of 'EachEndPeriod', 'EachMonth', 'EachWeek', 'EachDay'");
        }
        $this->container['variable_cost_when_pay'] = $variable_cost_when_pay;

        return $this;
    }

    /**
     * Gets one_time_plan
     * @return bool
     */
    public function getOneTimePlan()
    {
        return $this->container['one_time_plan'];
    }

    /**
     * Sets one_time_plan
     * @param bool $one_time_plan
     * @return $this
     */
    public function setOneTimePlan($one_time_plan)
    {
        $this->container['one_time_plan'] = $one_time_plan;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


