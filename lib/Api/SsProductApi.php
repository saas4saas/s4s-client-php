<?php
/**
 * SsProductApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * s4s-full
 *
 * description
 *
 * OpenAPI spec version: stable
 * Contact: rui.p.oliveira@impactinglabs.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * SsProductApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SsProductApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.saas4saas.com');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return SsProductApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation customerEnjoyAdd
     *
     * 
     *
     * @param string $customer_id The given id from the user service (required)
     * @param int $expiration_offset  (required)
     * @param string $override_enjoy_id  (required)
     * @param string $override_subscription_id  (required)
     * @param \Swagger\Client\Model\CustomerPack $new_enjoy  (optional)
     * @return \Swagger\Client\Model\CustomerPack
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerEnjoyAdd($customer_id, $expiration_offset, $override_enjoy_id, $override_subscription_id, $new_enjoy = null)
    {
        list($response) = $this->customerEnjoyAddWithHttpInfo($customer_id, $expiration_offset, $override_enjoy_id, $override_subscription_id, $new_enjoy);
        return $response;
    }

    /**
     * Operation customerEnjoyAddWithHttpInfo
     *
     * 
     *
     * @param string $customer_id The given id from the user service (required)
     * @param int $expiration_offset  (required)
     * @param string $override_enjoy_id  (required)
     * @param string $override_subscription_id  (required)
     * @param \Swagger\Client\Model\CustomerPack $new_enjoy  (optional)
     * @return Array of \Swagger\Client\Model\CustomerPack, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerEnjoyAddWithHttpInfo($customer_id, $expiration_offset, $override_enjoy_id, $override_subscription_id, $new_enjoy = null)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling customerEnjoyAdd');
        }
        // verify the required parameter 'expiration_offset' is set
        if ($expiration_offset === null) {
            throw new \InvalidArgumentException('Missing the required parameter $expiration_offset when calling customerEnjoyAdd');
        }
        // verify the required parameter 'override_enjoy_id' is set
        if ($override_enjoy_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $override_enjoy_id when calling customerEnjoyAdd');
        }
        // verify the required parameter 'override_subscription_id' is set
        if ($override_subscription_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $override_subscription_id when calling customerEnjoyAdd');
        }
        // parse inputs
        $resourcePath = "/s4s-product/customer/{customer-id}/enjoy";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($expiration_offset !== null) {
            $queryParams['expiration-offset'] = $this->apiClient->getSerializer()->toQueryValue($expiration_offset);
        }
        // query params
        if ($override_enjoy_id !== null) {
            $queryParams['override-enjoy-id'] = $this->apiClient->getSerializer()->toQueryValue($override_enjoy_id);
        }
        // query params
        if ($override_subscription_id !== null) {
            $queryParams['override-subscription-id'] = $this->apiClient->getSerializer()->toQueryValue($override_subscription_id);
        }
        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($new_enjoy)) {
            $_tempBody = $new_enjoy;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CustomerPack',
                '/s4s-product/customer/{customer-id}/enjoy'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CustomerPack', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CustomerPack', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customerEnjoyClose
     *
     * 
     *
     * @param string $customer_id The given id from the user service (required)
     * @param string $enjoy_id  (required)
     * @return \Swagger\Client\Model\CustomerPack
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerEnjoyClose($customer_id, $enjoy_id)
    {
        list($response) = $this->customerEnjoyCloseWithHttpInfo($customer_id, $enjoy_id);
        return $response;
    }

    /**
     * Operation customerEnjoyCloseWithHttpInfo
     *
     * 
     *
     * @param string $customer_id The given id from the user service (required)
     * @param string $enjoy_id  (required)
     * @return Array of \Swagger\Client\Model\CustomerPack, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerEnjoyCloseWithHttpInfo($customer_id, $enjoy_id)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling customerEnjoyClose');
        }
        // verify the required parameter 'enjoy_id' is set
        if ($enjoy_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $enjoy_id when calling customerEnjoyClose');
        }
        // parse inputs
        $resourcePath = "/s4s-product/customer/{customer-id}/enjoy/{enjoy-id}/close";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // path params
        if ($enjoy_id !== null) {
            $resourcePath = str_replace(
                "{" . "enjoy-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($enjoy_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CustomerPack',
                '/s4s-product/customer/{customer-id}/enjoy/{enjoy-id}/close'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CustomerPack', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CustomerPack', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customerEnjoyGet
     *
     * 
     *
     * @param string $customer_id The given id from the user service (required)
     * @param string $enjoy_id  (required)
     * @return \Swagger\Client\Model\CustomerPack
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerEnjoyGet($customer_id, $enjoy_id)
    {
        list($response) = $this->customerEnjoyGetWithHttpInfo($customer_id, $enjoy_id);
        return $response;
    }

    /**
     * Operation customerEnjoyGetWithHttpInfo
     *
     * 
     *
     * @param string $customer_id The given id from the user service (required)
     * @param string $enjoy_id  (required)
     * @return Array of \Swagger\Client\Model\CustomerPack, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerEnjoyGetWithHttpInfo($customer_id, $enjoy_id)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling customerEnjoyGet');
        }
        // verify the required parameter 'enjoy_id' is set
        if ($enjoy_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $enjoy_id when calling customerEnjoyGet');
        }
        // parse inputs
        $resourcePath = "/s4s-product/customer/{customer-id}/enjoy/{enjoy-id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // path params
        if ($enjoy_id !== null) {
            $resourcePath = str_replace(
                "{" . "enjoy-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($enjoy_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CustomerPack',
                '/s4s-product/customer/{customer-id}/enjoy/{enjoy-id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CustomerPack', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CustomerPack', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customerEnjoyGetAll
     *
     * 
     *
     * @param string $customer_id The given id from the user service (required)
     * @return string[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerEnjoyGetAll($customer_id)
    {
        list($response) = $this->customerEnjoyGetAllWithHttpInfo($customer_id);
        return $response;
    }

    /**
     * Operation customerEnjoyGetAllWithHttpInfo
     *
     * 
     *
     * @param string $customer_id The given id from the user service (required)
     * @return Array of string[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerEnjoyGetAllWithHttpInfo($customer_id)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling customerEnjoyGetAll');
        }
        // parse inputs
        $resourcePath = "/s4s-product/customer/{customer-id}/enjoy";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string[]',
                '/s4s-product/customer/{customer-id}/enjoy'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customerEnjoySpend
     *
     * 
     *
     * @param string $customer_id The given id from the user service (required)
     * @param string $customer_pack_id  (required)
     * @return map[string,int]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerEnjoySpend($customer_id, $customer_pack_id)
    {
        list($response) = $this->customerEnjoySpendWithHttpInfo($customer_id, $customer_pack_id);
        return $response;
    }

    /**
     * Operation customerEnjoySpendWithHttpInfo
     *
     * 
     *
     * @param string $customer_id The given id from the user service (required)
     * @param string $customer_pack_id  (required)
     * @return Array of map[string,int], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerEnjoySpendWithHttpInfo($customer_id, $customer_pack_id)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling customerEnjoySpend');
        }
        // verify the required parameter 'customer_pack_id' is set
        if ($customer_pack_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_pack_id when calling customerEnjoySpend');
        }
        // parse inputs
        $resourcePath = "/s4s-product/customer/{customer-id}/enjoy/{customer-pack-id}/spend";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // path params
        if ($customer_pack_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-pack-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_pack_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'map[string,int]',
                '/s4s-product/customer/{customer-id}/enjoy/{customer-pack-id}/spend'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'map[string,int]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,int]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customerEnjoyValues
     *
     * 
     *
     * @param string $customer_id The given id from the user service (required)
     * @param int $page  (required)
     * @param int $number_per_page  (required)
     * @param bool $load_resource_status_list  (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerEnjoyValues($customer_id, $page, $number_per_page, $load_resource_status_list)
    {
        list($response) = $this->customerEnjoyValuesWithHttpInfo($customer_id, $page, $number_per_page, $load_resource_status_list);
        return $response;
    }

    /**
     * Operation customerEnjoyValuesWithHttpInfo
     *
     * 
     *
     * @param string $customer_id The given id from the user service (required)
     * @param int $page  (required)
     * @param int $number_per_page  (required)
     * @param bool $load_resource_status_list  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerEnjoyValuesWithHttpInfo($customer_id, $page, $number_per_page, $load_resource_status_list)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling customerEnjoyValues');
        }
        // verify the required parameter 'page' is set
        if ($page === null) {
            throw new \InvalidArgumentException('Missing the required parameter $page when calling customerEnjoyValues');
        }
        // verify the required parameter 'number_per_page' is set
        if ($number_per_page === null) {
            throw new \InvalidArgumentException('Missing the required parameter $number_per_page when calling customerEnjoyValues');
        }
        // verify the required parameter 'load_resource_status_list' is set
        if ($load_resource_status_list === null) {
            throw new \InvalidArgumentException('Missing the required parameter $load_resource_status_list when calling customerEnjoyValues');
        }
        // parse inputs
        $resourcePath = "/s4s-product/customer/{customer-id}/enjoy/values";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($number_per_page !== null) {
            $queryParams['number-per-page'] = $this->apiClient->getSerializer()->toQueryValue($number_per_page);
        }
        // query params
        if ($load_resource_status_list !== null) {
            $queryParams['load-resource-status-list'] = $this->apiClient->getSerializer()->toQueryValue($load_resource_status_list);
        }
        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/s4s-product/customer/{customer-id}/enjoy/values'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customerHistoryPackGet
     *
     * 
     *
     * @param string $customer_id The given id from the user service (required)
     * @param string $id  (required)
     * @return \Swagger\Client\Model\CustomerPack
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerHistoryPackGet($customer_id, $id)
    {
        list($response) = $this->customerHistoryPackGetWithHttpInfo($customer_id, $id);
        return $response;
    }

    /**
     * Operation customerHistoryPackGetWithHttpInfo
     *
     * 
     *
     * @param string $customer_id The given id from the user service (required)
     * @param string $id  (required)
     * @return Array of \Swagger\Client\Model\CustomerPack, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerHistoryPackGetWithHttpInfo($customer_id, $id)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling customerHistoryPackGet');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customerHistoryPackGet');
        }
        // parse inputs
        $resourcePath = "/s4s-product/customer/{customer-id}/history/pack/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CustomerPack',
                '/s4s-product/customer/{customer-id}/history/pack/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CustomerPack', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CustomerPack', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customerHistoryPackGetAll
     *
     * 
     *
     * @param string $customer_id The given id from the user service (required)
     * @return string[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerHistoryPackGetAll($customer_id)
    {
        list($response) = $this->customerHistoryPackGetAllWithHttpInfo($customer_id);
        return $response;
    }

    /**
     * Operation customerHistoryPackGetAllWithHttpInfo
     *
     * 
     *
     * @param string $customer_id The given id from the user service (required)
     * @return Array of string[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerHistoryPackGetAllWithHttpInfo($customer_id)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling customerHistoryPackGetAll');
        }
        // parse inputs
        $resourcePath = "/s4s-product/customer/{customer-id}/history/pack";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string[]',
                '/s4s-product/customer/{customer-id}/history/pack'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customerHistoryPackValues
     *
     * 
     *
     * @param string $customer_id The given id from the user service (required)
     * @param int $page  (required)
     * @param int $number_per_page  (required)
     * @param bool $load_resource_status_list  (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerHistoryPackValues($customer_id, $page, $number_per_page, $load_resource_status_list)
    {
        list($response) = $this->customerHistoryPackValuesWithHttpInfo($customer_id, $page, $number_per_page, $load_resource_status_list);
        return $response;
    }

    /**
     * Operation customerHistoryPackValuesWithHttpInfo
     *
     * 
     *
     * @param string $customer_id The given id from the user service (required)
     * @param int $page  (required)
     * @param int $number_per_page  (required)
     * @param bool $load_resource_status_list  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerHistoryPackValuesWithHttpInfo($customer_id, $page, $number_per_page, $load_resource_status_list)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling customerHistoryPackValues');
        }
        // verify the required parameter 'page' is set
        if ($page === null) {
            throw new \InvalidArgumentException('Missing the required parameter $page when calling customerHistoryPackValues');
        }
        // verify the required parameter 'number_per_page' is set
        if ($number_per_page === null) {
            throw new \InvalidArgumentException('Missing the required parameter $number_per_page when calling customerHistoryPackValues');
        }
        // verify the required parameter 'load_resource_status_list' is set
        if ($load_resource_status_list === null) {
            throw new \InvalidArgumentException('Missing the required parameter $load_resource_status_list when calling customerHistoryPackValues');
        }
        // parse inputs
        $resourcePath = "/s4s-product/customer/{customer-id}/history/pack/values";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($number_per_page !== null) {
            $queryParams['number-per-page'] = $this->apiClient->getSerializer()->toQueryValue($number_per_page);
        }
        // query params
        if ($load_resource_status_list !== null) {
            $queryParams['load-resource-status-list'] = $this->apiClient->getSerializer()->toQueryValue($load_resource_status_list);
        }
        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/s4s-product/customer/{customer-id}/history/pack/values'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customerHistorySubscriptionGet
     *
     * 
     *
     * @param string $customer_id The given id from the user service (required)
     * @param string $id  (required)
     * @return \Swagger\Client\Model\CustomerPack
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerHistorySubscriptionGet($customer_id, $id)
    {
        list($response) = $this->customerHistorySubscriptionGetWithHttpInfo($customer_id, $id);
        return $response;
    }

    /**
     * Operation customerHistorySubscriptionGetWithHttpInfo
     *
     * 
     *
     * @param string $customer_id The given id from the user service (required)
     * @param string $id  (required)
     * @return Array of \Swagger\Client\Model\CustomerPack, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerHistorySubscriptionGetWithHttpInfo($customer_id, $id)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling customerHistorySubscriptionGet');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customerHistorySubscriptionGet');
        }
        // parse inputs
        $resourcePath = "/s4s-product/customer/{customer-id}/history/subscription/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CustomerPack',
                '/s4s-product/customer/{customer-id}/history/subscription/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CustomerPack', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CustomerPack', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customerHistorySubscriptionGetAll
     *
     * 
     *
     * @param string $customer_id The given id from the user service (required)
     * @return string[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerHistorySubscriptionGetAll($customer_id)
    {
        list($response) = $this->customerHistorySubscriptionGetAllWithHttpInfo($customer_id);
        return $response;
    }

    /**
     * Operation customerHistorySubscriptionGetAllWithHttpInfo
     *
     * 
     *
     * @param string $customer_id The given id from the user service (required)
     * @return Array of string[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerHistorySubscriptionGetAllWithHttpInfo($customer_id)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling customerHistorySubscriptionGetAll');
        }
        // parse inputs
        $resourcePath = "/s4s-product/customer/{customer-id}/history/subscription";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string[]',
                '/s4s-product/customer/{customer-id}/history/subscription'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customerHistorySubscriptionValues
     *
     * 
     *
     * @param string $customer_id The given id from the user service (required)
     * @param int $page  (required)
     * @param int $number_per_page  (required)
     * @param bool $load_resource_status_list  (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerHistorySubscriptionValues($customer_id, $page, $number_per_page, $load_resource_status_list)
    {
        list($response) = $this->customerHistorySubscriptionValuesWithHttpInfo($customer_id, $page, $number_per_page, $load_resource_status_list);
        return $response;
    }

    /**
     * Operation customerHistorySubscriptionValuesWithHttpInfo
     *
     * 
     *
     * @param string $customer_id The given id from the user service (required)
     * @param int $page  (required)
     * @param int $number_per_page  (required)
     * @param bool $load_resource_status_list  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerHistorySubscriptionValuesWithHttpInfo($customer_id, $page, $number_per_page, $load_resource_status_list)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling customerHistorySubscriptionValues');
        }
        // verify the required parameter 'page' is set
        if ($page === null) {
            throw new \InvalidArgumentException('Missing the required parameter $page when calling customerHistorySubscriptionValues');
        }
        // verify the required parameter 'number_per_page' is set
        if ($number_per_page === null) {
            throw new \InvalidArgumentException('Missing the required parameter $number_per_page when calling customerHistorySubscriptionValues');
        }
        // verify the required parameter 'load_resource_status_list' is set
        if ($load_resource_status_list === null) {
            throw new \InvalidArgumentException('Missing the required parameter $load_resource_status_list when calling customerHistorySubscriptionValues');
        }
        // parse inputs
        $resourcePath = "/s4s-product/customer/{customer-id}/history/subscription/values";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($number_per_page !== null) {
            $queryParams['number-per-page'] = $this->apiClient->getSerializer()->toQueryValue($number_per_page);
        }
        // query params
        if ($load_resource_status_list !== null) {
            $queryParams['load-resource-status-list'] = $this->apiClient->getSerializer()->toQueryValue($load_resource_status_list);
        }
        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/s4s-product/customer/{customer-id}/history/subscription/values'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customerResource
     *
     * 
     *
     * @param string $customer_id The given id from the user service (required)
     * @param int $page  (required)
     * @param int $number_per_page  (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerResource($customer_id, $page, $number_per_page)
    {
        list($response) = $this->customerResourceWithHttpInfo($customer_id, $page, $number_per_page);
        return $response;
    }

    /**
     * Operation customerResourceWithHttpInfo
     *
     * 
     *
     * @param string $customer_id The given id from the user service (required)
     * @param int $page  (required)
     * @param int $number_per_page  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerResourceWithHttpInfo($customer_id, $page, $number_per_page)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling customerResource');
        }
        // verify the required parameter 'page' is set
        if ($page === null) {
            throw new \InvalidArgumentException('Missing the required parameter $page when calling customerResource');
        }
        // verify the required parameter 'number_per_page' is set
        if ($number_per_page === null) {
            throw new \InvalidArgumentException('Missing the required parameter $number_per_page when calling customerResource');
        }
        // parse inputs
        $resourcePath = "/s4s-product/customer/{customer-id}/resource";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($number_per_page !== null) {
            $queryParams['number-per-page'] = $this->apiClient->getSerializer()->toQueryValue($number_per_page);
        }
        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/s4s-product/customer/{customer-id}/resource'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customerSubscriptionAdd
     *
     * 
     *
     * @param string $customer_id The given id from the user service (required)
     * @param string $override_subscription_id  (required)
     * @param string $override_enjoy_id  (required)
     * @param \Swagger\Client\Model\CustomerPackSubscription $new_subscription  (optional)
     * @return \Swagger\Client\Model\CustomerPackSubscription
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerSubscriptionAdd($customer_id, $override_subscription_id, $override_enjoy_id, $new_subscription = null)
    {
        list($response) = $this->customerSubscriptionAddWithHttpInfo($customer_id, $override_subscription_id, $override_enjoy_id, $new_subscription);
        return $response;
    }

    /**
     * Operation customerSubscriptionAddWithHttpInfo
     *
     * 
     *
     * @param string $customer_id The given id from the user service (required)
     * @param string $override_subscription_id  (required)
     * @param string $override_enjoy_id  (required)
     * @param \Swagger\Client\Model\CustomerPackSubscription $new_subscription  (optional)
     * @return Array of \Swagger\Client\Model\CustomerPackSubscription, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerSubscriptionAddWithHttpInfo($customer_id, $override_subscription_id, $override_enjoy_id, $new_subscription = null)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling customerSubscriptionAdd');
        }
        // verify the required parameter 'override_subscription_id' is set
        if ($override_subscription_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $override_subscription_id when calling customerSubscriptionAdd');
        }
        // verify the required parameter 'override_enjoy_id' is set
        if ($override_enjoy_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $override_enjoy_id when calling customerSubscriptionAdd');
        }
        // parse inputs
        $resourcePath = "/s4s-product/customer/{customer-id}/subscription";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($override_subscription_id !== null) {
            $queryParams['override-subscription-id'] = $this->apiClient->getSerializer()->toQueryValue($override_subscription_id);
        }
        // query params
        if ($override_enjoy_id !== null) {
            $queryParams['override-enjoy-id'] = $this->apiClient->getSerializer()->toQueryValue($override_enjoy_id);
        }
        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($new_subscription)) {
            $_tempBody = $new_subscription;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CustomerPackSubscription',
                '/s4s-product/customer/{customer-id}/subscription'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CustomerPackSubscription', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CustomerPackSubscription', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customerSubscriptionClose
     *
     * 
     *
     * @param string $customer_id The given id from the user service (required)
     * @param string $subscription_id  (required)
     * @return string
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerSubscriptionClose($customer_id, $subscription_id)
    {
        list($response) = $this->customerSubscriptionCloseWithHttpInfo($customer_id, $subscription_id);
        return $response;
    }

    /**
     * Operation customerSubscriptionCloseWithHttpInfo
     *
     * 
     *
     * @param string $customer_id The given id from the user service (required)
     * @param string $subscription_id  (required)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerSubscriptionCloseWithHttpInfo($customer_id, $subscription_id)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling customerSubscriptionClose');
        }
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subscription_id when calling customerSubscriptionClose');
        }
        // parse inputs
        $resourcePath = "/s4s-product/customer/{customer-id}/subscription/{subscription-id}/close";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                "{" . "subscription-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscription_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/s4s-product/customer/{customer-id}/subscription/{subscription-id}/close'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customerSubscriptionGet
     *
     * 
     *
     * @param string $customer_id The given id from the user service (required)
     * @param string $subscription_id  (required)
     * @return \Swagger\Client\Model\CustomerPackSubscription
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerSubscriptionGet($customer_id, $subscription_id)
    {
        list($response) = $this->customerSubscriptionGetWithHttpInfo($customer_id, $subscription_id);
        return $response;
    }

    /**
     * Operation customerSubscriptionGetWithHttpInfo
     *
     * 
     *
     * @param string $customer_id The given id from the user service (required)
     * @param string $subscription_id  (required)
     * @return Array of \Swagger\Client\Model\CustomerPackSubscription, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerSubscriptionGetWithHttpInfo($customer_id, $subscription_id)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling customerSubscriptionGet');
        }
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subscription_id when calling customerSubscriptionGet');
        }
        // parse inputs
        $resourcePath = "/s4s-product/customer/{customer-id}/subscription/{subscription-id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                "{" . "subscription-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscription_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CustomerPackSubscription',
                '/s4s-product/customer/{customer-id}/subscription/{subscription-id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CustomerPackSubscription', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CustomerPackSubscription', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customerSubscriptionGetAll
     *
     * 
     *
     * @param string $customer_id The given id from the user service (required)
     * @return string[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerSubscriptionGetAll($customer_id)
    {
        list($response) = $this->customerSubscriptionGetAllWithHttpInfo($customer_id);
        return $response;
    }

    /**
     * Operation customerSubscriptionGetAllWithHttpInfo
     *
     * 
     *
     * @param string $customer_id The given id from the user service (required)
     * @return Array of string[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerSubscriptionGetAllWithHttpInfo($customer_id)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling customerSubscriptionGetAll');
        }
        // parse inputs
        $resourcePath = "/s4s-product/customer/{customer-id}/subscription";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string[]',
                '/s4s-product/customer/{customer-id}/subscription'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customerSubscriptionRenew
     *
     * 
     *
     * @param string $customer_id The given id from the user service (required)
     * @param string $subscription_id  (required)
     * @return string
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerSubscriptionRenew($customer_id, $subscription_id)
    {
        list($response) = $this->customerSubscriptionRenewWithHttpInfo($customer_id, $subscription_id);
        return $response;
    }

    /**
     * Operation customerSubscriptionRenewWithHttpInfo
     *
     * 
     *
     * @param string $customer_id The given id from the user service (required)
     * @param string $subscription_id  (required)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerSubscriptionRenewWithHttpInfo($customer_id, $subscription_id)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling customerSubscriptionRenew');
        }
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $subscription_id when calling customerSubscriptionRenew');
        }
        // parse inputs
        $resourcePath = "/s4s-product/customer/{customer-id}/subscription/{subscription-id}/renew";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                "{" . "subscription-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($subscription_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/s4s-product/customer/{customer-id}/subscription/{subscription-id}/renew'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customerSubscriptionSpend
     *
     * 
     *
     * @param string $customer_id The given id from the user service (required)
     * @param string $customer_subscription_id  (required)
     * @return map[string,int]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerSubscriptionSpend($customer_id, $customer_subscription_id)
    {
        list($response) = $this->customerSubscriptionSpendWithHttpInfo($customer_id, $customer_subscription_id);
        return $response;
    }

    /**
     * Operation customerSubscriptionSpendWithHttpInfo
     *
     * 
     *
     * @param string $customer_id The given id from the user service (required)
     * @param string $customer_subscription_id  (required)
     * @return Array of map[string,int], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerSubscriptionSpendWithHttpInfo($customer_id, $customer_subscription_id)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling customerSubscriptionSpend');
        }
        // verify the required parameter 'customer_subscription_id' is set
        if ($customer_subscription_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_subscription_id when calling customerSubscriptionSpend');
        }
        // parse inputs
        $resourcePath = "/s4s-product/customer/{customer-id}/subscription/{customer-subscription-id}/spend";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // path params
        if ($customer_subscription_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-subscription-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_subscription_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'map[string,int]',
                '/s4s-product/customer/{customer-id}/subscription/{customer-subscription-id}/spend'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'map[string,int]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'map[string,int]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customerSubscriptionValues
     *
     * 
     *
     * @param string $customer_id The given id from the user service (required)
     * @param int $page  (required)
     * @param int $number_per_page  (required)
     * @param bool $load_default_user  (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerSubscriptionValues($customer_id, $page, $number_per_page, $load_default_user)
    {
        list($response) = $this->customerSubscriptionValuesWithHttpInfo($customer_id, $page, $number_per_page, $load_default_user);
        return $response;
    }

    /**
     * Operation customerSubscriptionValuesWithHttpInfo
     *
     * 
     *
     * @param string $customer_id The given id from the user service (required)
     * @param int $page  (required)
     * @param int $number_per_page  (required)
     * @param bool $load_default_user  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerSubscriptionValuesWithHttpInfo($customer_id, $page, $number_per_page, $load_default_user)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling customerSubscriptionValues');
        }
        // verify the required parameter 'page' is set
        if ($page === null) {
            throw new \InvalidArgumentException('Missing the required parameter $page when calling customerSubscriptionValues');
        }
        // verify the required parameter 'number_per_page' is set
        if ($number_per_page === null) {
            throw new \InvalidArgumentException('Missing the required parameter $number_per_page when calling customerSubscriptionValues');
        }
        // verify the required parameter 'load_default_user' is set
        if ($load_default_user === null) {
            throw new \InvalidArgumentException('Missing the required parameter $load_default_user when calling customerSubscriptionValues');
        }
        // parse inputs
        $resourcePath = "/s4s-product/customer/{customer-id}/subscription/values";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($number_per_page !== null) {
            $queryParams['number-per-page'] = $this->apiClient->getSerializer()->toQueryValue($number_per_page);
        }
        // query params
        if ($load_default_user !== null) {
            $queryParams['load-default-user'] = $this->apiClient->getSerializer()->toQueryValue($load_default_user);
        }
        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/s4s-product/customer/{customer-id}/subscription/values'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation productConfigGet
     *
     * 
     *
     * @return \Swagger\Client\Model\ProductConf
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function productConfigGet()
    {
        list($response) = $this->productConfigGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation productConfigGetWithHttpInfo
     *
     * 
     *
     * @return Array of \Swagger\Client\Model\ProductConf, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function productConfigGetWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/s4s-product/productConfig";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductConf',
                '/s4s-product/productConfig'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductConf', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductConf', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation productConfigPut
     *
     * 
     *
     * @param \Swagger\Client\Model\ProductConf $a  (optional)
     * @return string
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function productConfigPut($a = null)
    {
        list($response) = $this->productConfigPutWithHttpInfo($a);
        return $response;
    }

    /**
     * Operation productConfigPutWithHttpInfo
     *
     * 
     *
     * @param \Swagger\Client\Model\ProductConf $a  (optional)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function productConfigPutWithHttpInfo($a = null)
    {
        // parse inputs
        $resourcePath = "/s4s-product/productConfig";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($a)) {
            $_tempBody = $a;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/s4s-product/productConfig'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
