<?php
/**
 * SsPricingApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * s4s-full
 *
 * description
 *
 * OpenAPI spec version: stable
 * Contact: rui.p.oliveira@impactinglabs.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * SsPricingApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SsPricingApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.saas4saas.com');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return SsPricingApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation customerBillClose
     *
     * 
     *
     * @param string $customer_id  (required)
     * @param string $customer_bill_id  (required)
     * @return \Swagger\Client\Model\CustomerBill
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerBillClose($customer_id, $customer_bill_id)
    {
        list($response) = $this->customerBillCloseWithHttpInfo($customer_id, $customer_bill_id);
        return $response;
    }

    /**
     * Operation customerBillCloseWithHttpInfo
     *
     * 
     *
     * @param string $customer_id  (required)
     * @param string $customer_bill_id  (required)
     * @return Array of \Swagger\Client\Model\CustomerBill, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerBillCloseWithHttpInfo($customer_id, $customer_bill_id)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling customerBillClose');
        }
        // verify the required parameter 'customer_bill_id' is set
        if ($customer_bill_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_bill_id when calling customerBillClose');
        }
        // parse inputs
        $resourcePath = "/s4s-pricing/customer/{customer-id}/bill/{customer-bill-id}/close";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // path params
        if ($customer_bill_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-bill-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_bill_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CustomerBill',
                '/s4s-pricing/customer/{customer-id}/bill/{customer-bill-id}/close'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CustomerBill', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CustomerBill', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customerBillGet
     *
     * 
     *
     * @param string $customer_id  (required)
     * @param string $customer_bill_id  (required)
     * @return \Swagger\Client\Model\CustomerBill
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerBillGet($customer_id, $customer_bill_id)
    {
        list($response) = $this->customerBillGetWithHttpInfo($customer_id, $customer_bill_id);
        return $response;
    }

    /**
     * Operation customerBillGetWithHttpInfo
     *
     * 
     *
     * @param string $customer_id  (required)
     * @param string $customer_bill_id  (required)
     * @return Array of \Swagger\Client\Model\CustomerBill, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerBillGetWithHttpInfo($customer_id, $customer_bill_id)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling customerBillGet');
        }
        // verify the required parameter 'customer_bill_id' is set
        if ($customer_bill_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_bill_id when calling customerBillGet');
        }
        // parse inputs
        $resourcePath = "/s4s-pricing/customer/{customer-id}/bill/{customer-bill-id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // path params
        if ($customer_bill_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-bill-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_bill_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CustomerBill',
                '/s4s-pricing/customer/{customer-id}/bill/{customer-bill-id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CustomerBill', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CustomerBill', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customerBillInitGet
     *
     * 
     *
     * @param string $customer_id  (required)
     * @param string $bill_id  (required)
     * @param string $customer_plan_id  (required)
     * @return \Swagger\Client\Model\CustomerBill
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerBillInitGet($customer_id, $bill_id, $customer_plan_id)
    {
        list($response) = $this->customerBillInitGetWithHttpInfo($customer_id, $bill_id, $customer_plan_id);
        return $response;
    }

    /**
     * Operation customerBillInitGetWithHttpInfo
     *
     * 
     *
     * @param string $customer_id  (required)
     * @param string $bill_id  (required)
     * @param string $customer_plan_id  (required)
     * @return Array of \Swagger\Client\Model\CustomerBill, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerBillInitGetWithHttpInfo($customer_id, $bill_id, $customer_plan_id)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling customerBillInitGet');
        }
        // verify the required parameter 'bill_id' is set
        if ($bill_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $bill_id when calling customerBillInitGet');
        }
        // verify the required parameter 'customer_plan_id' is set
        if ($customer_plan_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_plan_id when calling customerBillInitGet');
        }
        // parse inputs
        $resourcePath = "/s4s-pricing/customer/{customer-id}/bill/init";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($bill_id !== null) {
            $queryParams['bill-id'] = $this->apiClient->getSerializer()->toQueryValue($bill_id);
        }
        // query params
        if ($customer_plan_id !== null) {
            $queryParams['customer-plan-id'] = $this->apiClient->getSerializer()->toQueryValue($customer_plan_id);
        }
        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CustomerBill',
                '/s4s-pricing/customer/{customer-id}/bill/init'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CustomerBill', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CustomerBill', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customerBillInitPost
     *
     * 
     *
     * @param string $customer_id  (required)
     * @param string $bill_id  (required)
     * @param string $customer_plan_id  (required)
     * @return \Swagger\Client\Model\CustomerBill
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerBillInitPost($customer_id, $bill_id, $customer_plan_id)
    {
        list($response) = $this->customerBillInitPostWithHttpInfo($customer_id, $bill_id, $customer_plan_id);
        return $response;
    }

    /**
     * Operation customerBillInitPostWithHttpInfo
     *
     * 
     *
     * @param string $customer_id  (required)
     * @param string $bill_id  (required)
     * @param string $customer_plan_id  (required)
     * @return Array of \Swagger\Client\Model\CustomerBill, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerBillInitPostWithHttpInfo($customer_id, $bill_id, $customer_plan_id)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling customerBillInitPost');
        }
        // verify the required parameter 'bill_id' is set
        if ($bill_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $bill_id when calling customerBillInitPost');
        }
        // verify the required parameter 'customer_plan_id' is set
        if ($customer_plan_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_plan_id when calling customerBillInitPost');
        }
        // parse inputs
        $resourcePath = "/s4s-pricing/customer/{customer-id}/bill/initPost";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($bill_id !== null) {
            $queryParams['bill-id'] = $this->apiClient->getSerializer()->toQueryValue($bill_id);
        }
        // query params
        if ($customer_plan_id !== null) {
            $queryParams['customer-plan-id'] = $this->apiClient->getSerializer()->toQueryValue($customer_plan_id);
        }
        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CustomerBill',
                '/s4s-pricing/customer/{customer-id}/bill/initPost'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CustomerBill', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CustomerBill', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customerBillOrGet
     *
     * 
     *
     * @param string $customer_id  (required)
     * @return \Swagger\Client\Model\CustomerBill
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerBillOrGet($customer_id)
    {
        list($response) = $this->customerBillOrGetWithHttpInfo($customer_id);
        return $response;
    }

    /**
     * Operation customerBillOrGetWithHttpInfo
     *
     * 
     *
     * @param string $customer_id  (required)
     * @return Array of \Swagger\Client\Model\CustomerBill, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerBillOrGetWithHttpInfo($customer_id)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling customerBillOrGet');
        }
        // parse inputs
        $resourcePath = "/s4s-pricing/customer/{customer-id}/bill/or";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CustomerBill',
                '/s4s-pricing/customer/{customer-id}/bill/or'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CustomerBill', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CustomerBill', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customerBillValues
     *
     * 
     *
     * @param string $customer_id  (required)
     * @param int $page  (required)
     * @param int $number_per_page  (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerBillValues($customer_id, $page, $number_per_page)
    {
        list($response) = $this->customerBillValuesWithHttpInfo($customer_id, $page, $number_per_page);
        return $response;
    }

    /**
     * Operation customerBillValuesWithHttpInfo
     *
     * 
     *
     * @param string $customer_id  (required)
     * @param int $page  (required)
     * @param int $number_per_page  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerBillValuesWithHttpInfo($customer_id, $page, $number_per_page)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling customerBillValues');
        }
        // verify the required parameter 'page' is set
        if ($page === null) {
            throw new \InvalidArgumentException('Missing the required parameter $page when calling customerBillValues');
        }
        // verify the required parameter 'number_per_page' is set
        if ($number_per_page === null) {
            throw new \InvalidArgumentException('Missing the required parameter $number_per_page when calling customerBillValues');
        }
        // parse inputs
        $resourcePath = "/s4s-pricing/customer/{customer-id}/bill/values";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($number_per_page !== null) {
            $queryParams['number-per-page'] = $this->apiClient->getSerializer()->toQueryValue($number_per_page);
        }
        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/s4s-pricing/customer/{customer-id}/bill/values'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customerHistoryPlanValues
     *
     * 
     *
     * @param string $customer_id  (required)
     * @param int $page  (required)
     * @param int $number_per_page  (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerHistoryPlanValues($customer_id, $page, $number_per_page)
    {
        list($response) = $this->customerHistoryPlanValuesWithHttpInfo($customer_id, $page, $number_per_page);
        return $response;
    }

    /**
     * Operation customerHistoryPlanValuesWithHttpInfo
     *
     * 
     *
     * @param string $customer_id  (required)
     * @param int $page  (required)
     * @param int $number_per_page  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerHistoryPlanValuesWithHttpInfo($customer_id, $page, $number_per_page)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling customerHistoryPlanValues');
        }
        // verify the required parameter 'page' is set
        if ($page === null) {
            throw new \InvalidArgumentException('Missing the required parameter $page when calling customerHistoryPlanValues');
        }
        // verify the required parameter 'number_per_page' is set
        if ($number_per_page === null) {
            throw new \InvalidArgumentException('Missing the required parameter $number_per_page when calling customerHistoryPlanValues');
        }
        // parse inputs
        $resourcePath = "/s4s-pricing/customer/{customer-id}/history/plan/values";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($number_per_page !== null) {
            $queryParams['number-per-page'] = $this->apiClient->getSerializer()->toQueryValue($number_per_page);
        }
        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/s4s-pricing/customer/{customer-id}/history/plan/values'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customerPlanAdd
     *
     * 
     *
     * @param string $customer_id  (required)
     * @param \Swagger\Client\Model\CustomerPlan $customer_plan  (optional)
     * @return \Swagger\Client\Model\CustomerPlan
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerPlanAdd($customer_id, $customer_plan = null)
    {
        list($response) = $this->customerPlanAddWithHttpInfo($customer_id, $customer_plan);
        return $response;
    }

    /**
     * Operation customerPlanAddWithHttpInfo
     *
     * 
     *
     * @param string $customer_id  (required)
     * @param \Swagger\Client\Model\CustomerPlan $customer_plan  (optional)
     * @return Array of \Swagger\Client\Model\CustomerPlan, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerPlanAddWithHttpInfo($customer_id, $customer_plan = null)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling customerPlanAdd');
        }
        // parse inputs
        $resourcePath = "/s4s-pricing/customer/{customer-id}/plan";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($customer_plan)) {
            $_tempBody = $customer_plan;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CustomerPlan',
                '/s4s-pricing/customer/{customer-id}/plan'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CustomerPlan', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CustomerPlan', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customerPlanAddCheck
     *
     * 
     *
     * @param string $customer_id  (required)
     * @param \Swagger\Client\Model\CustomerPlan $customer_plan  (optional)
     * @return \Swagger\Client\Model\CustomerPlan
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerPlanAddCheck($customer_id, $customer_plan = null)
    {
        list($response) = $this->customerPlanAddCheckWithHttpInfo($customer_id, $customer_plan);
        return $response;
    }

    /**
     * Operation customerPlanAddCheckWithHttpInfo
     *
     * 
     *
     * @param string $customer_id  (required)
     * @param \Swagger\Client\Model\CustomerPlan $customer_plan  (optional)
     * @return Array of \Swagger\Client\Model\CustomerPlan, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerPlanAddCheckWithHttpInfo($customer_id, $customer_plan = null)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling customerPlanAddCheck');
        }
        // parse inputs
        $resourcePath = "/s4s-pricing/customer/{customer-id}/plan/addCheck";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($customer_plan)) {
            $_tempBody = $customer_plan;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CustomerPlan',
                '/s4s-pricing/customer/{customer-id}/plan/addCheck'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CustomerPlan', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CustomerPlan', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customerPlanClose
     *
     * 
     *
     * @param string $customer_id  (required)
     * @param string $customer_plan_id  (required)
     * @return string
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerPlanClose($customer_id, $customer_plan_id)
    {
        list($response) = $this->customerPlanCloseWithHttpInfo($customer_id, $customer_plan_id);
        return $response;
    }

    /**
     * Operation customerPlanCloseWithHttpInfo
     *
     * 
     *
     * @param string $customer_id  (required)
     * @param string $customer_plan_id  (required)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerPlanCloseWithHttpInfo($customer_id, $customer_plan_id)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling customerPlanClose');
        }
        // verify the required parameter 'customer_plan_id' is set
        if ($customer_plan_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_plan_id when calling customerPlanClose');
        }
        // parse inputs
        $resourcePath = "/s4s-pricing/customer/{customer-id}/plan/{customer-plan-id}/close";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // path params
        if ($customer_plan_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-plan-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_plan_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/s4s-pricing/customer/{customer-id}/plan/{customer-plan-id}/close'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customerPlanFamily
     *
     * 
     *
     * @param string $customer_id  (required)
     * @param string $family  (required)
     * @return \Swagger\Client\Model\CustomerPlan
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerPlanFamily($customer_id, $family)
    {
        list($response) = $this->customerPlanFamilyWithHttpInfo($customer_id, $family);
        return $response;
    }

    /**
     * Operation customerPlanFamilyWithHttpInfo
     *
     * 
     *
     * @param string $customer_id  (required)
     * @param string $family  (required)
     * @return Array of \Swagger\Client\Model\CustomerPlan, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerPlanFamilyWithHttpInfo($customer_id, $family)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling customerPlanFamily');
        }
        // verify the required parameter 'family' is set
        if ($family === null) {
            throw new \InvalidArgumentException('Missing the required parameter $family when calling customerPlanFamily');
        }
        // parse inputs
        $resourcePath = "/s4s-pricing/customer/{customer-id}/plan/family";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($family !== null) {
            $queryParams['family'] = $this->apiClient->getSerializer()->toQueryValue($family);
        }
        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CustomerPlan',
                '/s4s-pricing/customer/{customer-id}/plan/family'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CustomerPlan', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CustomerPlan', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customerPlanGet
     *
     * 
     *
     * @param string $customer_id  (required)
     * @param string $customer_plan_id  (required)
     * @return \Swagger\Client\Model\CustomerPlan
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerPlanGet($customer_id, $customer_plan_id)
    {
        list($response) = $this->customerPlanGetWithHttpInfo($customer_id, $customer_plan_id);
        return $response;
    }

    /**
     * Operation customerPlanGetWithHttpInfo
     *
     * 
     *
     * @param string $customer_id  (required)
     * @param string $customer_plan_id  (required)
     * @return Array of \Swagger\Client\Model\CustomerPlan, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerPlanGetWithHttpInfo($customer_id, $customer_plan_id)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling customerPlanGet');
        }
        // verify the required parameter 'customer_plan_id' is set
        if ($customer_plan_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_plan_id when calling customerPlanGet');
        }
        // parse inputs
        $resourcePath = "/s4s-pricing/customer/{customer-id}/plan/{customer-plan-id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // path params
        if ($customer_plan_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-plan-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_plan_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CustomerPlan',
                '/s4s-pricing/customer/{customer-id}/plan/{customer-plan-id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CustomerPlan', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CustomerPlan', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customerPlanGetAll
     *
     * 
     *
     * @param string $customer_id  (required)
     * @return string[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerPlanGetAll($customer_id)
    {
        list($response) = $this->customerPlanGetAllWithHttpInfo($customer_id);
        return $response;
    }

    /**
     * Operation customerPlanGetAllWithHttpInfo
     *
     * 
     *
     * @param string $customer_id  (required)
     * @return Array of string[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerPlanGetAllWithHttpInfo($customer_id)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling customerPlanGetAll');
        }
        // parse inputs
        $resourcePath = "/s4s-pricing/customer/{customer-id}/plan";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string[]',
                '/s4s-pricing/customer/{customer-id}/plan'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customerPlanPay
     *
     * 
     *
     * @param string $customer_id  (required)
     * @param string $customer_plan_id  (required)
     * @param string $customer_bill_id  (required)
     * @param string $when_pay  (required)
     * @return string
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerPlanPay($customer_id, $customer_plan_id, $customer_bill_id, $when_pay)
    {
        list($response) = $this->customerPlanPayWithHttpInfo($customer_id, $customer_plan_id, $customer_bill_id, $when_pay);
        return $response;
    }

    /**
     * Operation customerPlanPayWithHttpInfo
     *
     * 
     *
     * @param string $customer_id  (required)
     * @param string $customer_plan_id  (required)
     * @param string $customer_bill_id  (required)
     * @param string $when_pay  (required)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerPlanPayWithHttpInfo($customer_id, $customer_plan_id, $customer_bill_id, $when_pay)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling customerPlanPay');
        }
        // verify the required parameter 'customer_plan_id' is set
        if ($customer_plan_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_plan_id when calling customerPlanPay');
        }
        // verify the required parameter 'customer_bill_id' is set
        if ($customer_bill_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_bill_id when calling customerPlanPay');
        }
        // verify the required parameter 'when_pay' is set
        if ($when_pay === null) {
            throw new \InvalidArgumentException('Missing the required parameter $when_pay when calling customerPlanPay');
        }
        // parse inputs
        $resourcePath = "/s4s-pricing/customer/{customer-id}/plan/pay";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($customer_plan_id !== null) {
            $queryParams['customer-plan-id'] = $this->apiClient->getSerializer()->toQueryValue($customer_plan_id);
        }
        // query params
        if ($customer_bill_id !== null) {
            $queryParams['customer-bill-id'] = $this->apiClient->getSerializer()->toQueryValue($customer_bill_id);
        }
        // query params
        if ($when_pay !== null) {
            $queryParams['when-pay'] = $this->apiClient->getSerializer()->toQueryValue($when_pay);
        }
        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/s4s-pricing/customer/{customer-id}/plan/pay'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customerPlanPlan
     *
     * 
     *
     * @param string $customer_id  (required)
     * @param string $plan_id  (required)
     * @return \Swagger\Client\Model\Plan
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerPlanPlan($customer_id, $plan_id)
    {
        list($response) = $this->customerPlanPlanWithHttpInfo($customer_id, $plan_id);
        return $response;
    }

    /**
     * Operation customerPlanPlanWithHttpInfo
     *
     * 
     *
     * @param string $customer_id  (required)
     * @param string $plan_id  (required)
     * @return Array of \Swagger\Client\Model\Plan, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerPlanPlanWithHttpInfo($customer_id, $plan_id)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling customerPlanPlan');
        }
        // verify the required parameter 'plan_id' is set
        if ($plan_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $plan_id when calling customerPlanPlan');
        }
        // parse inputs
        $resourcePath = "/s4s-pricing/customer/{customer-id}/plan/plan";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($plan_id !== null) {
            $queryParams['plan-id'] = $this->apiClient->getSerializer()->toQueryValue($plan_id);
        }
        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Plan',
                '/s4s-pricing/customer/{customer-id}/plan/plan'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Plan', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Plan', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customerPlanValues
     *
     * 
     *
     * @param string $customer_id  (required)
     * @param int $page  (required)
     * @param int $number_per_page  (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerPlanValues($customer_id, $page, $number_per_page)
    {
        list($response) = $this->customerPlanValuesWithHttpInfo($customer_id, $page, $number_per_page);
        return $response;
    }

    /**
     * Operation customerPlanValuesWithHttpInfo
     *
     * 
     *
     * @param string $customer_id  (required)
     * @param int $page  (required)
     * @param int $number_per_page  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function customerPlanValuesWithHttpInfo($customer_id, $page, $number_per_page)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling customerPlanValues');
        }
        // verify the required parameter 'page' is set
        if ($page === null) {
            throw new \InvalidArgumentException('Missing the required parameter $page when calling customerPlanValues');
        }
        // verify the required parameter 'number_per_page' is set
        if ($number_per_page === null) {
            throw new \InvalidArgumentException('Missing the required parameter $number_per_page when calling customerPlanValues');
        }
        // parse inputs
        $resourcePath = "/s4s-pricing/customer/{customer-id}/plan/values";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($number_per_page !== null) {
            $queryParams['number-per-page'] = $this->apiClient->getSerializer()->toQueryValue($number_per_page);
        }
        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/s4s-pricing/customer/{customer-id}/plan/values'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation pricing
     *
     * 
     *
     * @param string $currency  (required)
     * @param string $only_pan_id  (required)
     * @return \Swagger\Client\Model\PricingTableFull
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function pricing($currency, $only_pan_id)
    {
        list($response) = $this->pricingWithHttpInfo($currency, $only_pan_id);
        return $response;
    }

    /**
     * Operation pricingWithHttpInfo
     *
     * 
     *
     * @param string $currency  (required)
     * @param string $only_pan_id  (required)
     * @return Array of \Swagger\Client\Model\PricingTableFull, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function pricingWithHttpInfo($currency, $only_pan_id)
    {
        // verify the required parameter 'currency' is set
        if ($currency === null) {
            throw new \InvalidArgumentException('Missing the required parameter $currency when calling pricing');
        }
        // verify the required parameter 'only_pan_id' is set
        if ($only_pan_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $only_pan_id when calling pricing');
        }
        // parse inputs
        $resourcePath = "/s4s-pricing/pricing";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($currency !== null) {
            $queryParams['currency'] = $this->apiClient->getSerializer()->toQueryValue($currency);
        }
        // query params
        if ($only_pan_id !== null) {
            $queryParams['only-pan-id'] = $this->apiClient->getSerializer()->toQueryValue($only_pan_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PricingTableFull',
                '/s4s-pricing/pricing'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PricingTableFull', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PricingTableFull', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation pricing2
     *
     * 
     *
     * @param string $currency  (required)
     * @param string $only_pan_id  (required)
     * @return \Swagger\Client\Model\PricingTable2Full
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function pricing2($currency, $only_pan_id)
    {
        list($response) = $this->pricing2WithHttpInfo($currency, $only_pan_id);
        return $response;
    }

    /**
     * Operation pricing2WithHttpInfo
     *
     * 
     *
     * @param string $currency  (required)
     * @param string $only_pan_id  (required)
     * @return Array of \Swagger\Client\Model\PricingTable2Full, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function pricing2WithHttpInfo($currency, $only_pan_id)
    {
        // verify the required parameter 'currency' is set
        if ($currency === null) {
            throw new \InvalidArgumentException('Missing the required parameter $currency when calling pricing2');
        }
        // verify the required parameter 'only_pan_id' is set
        if ($only_pan_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $only_pan_id when calling pricing2');
        }
        // parse inputs
        $resourcePath = "/s4s-pricing/pricing2";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($currency !== null) {
            $queryParams['currency'] = $this->apiClient->getSerializer()->toQueryValue($currency);
        }
        // query params
        if ($only_pan_id !== null) {
            $queryParams['only-pan-id'] = $this->apiClient->getSerializer()->toQueryValue($only_pan_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PricingTable2Full',
                '/s4s-pricing/pricing2'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PricingTable2Full', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PricingTable2Full', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation pricingConfigGet
     *
     * 
     *
     * @return \Swagger\Client\Model\PricingConf
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function pricingConfigGet()
    {
        list($response) = $this->pricingConfigGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation pricingConfigGetWithHttpInfo
     *
     * 
     *
     * @return Array of \Swagger\Client\Model\PricingConf, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function pricingConfigGetWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/s4s-pricing/pricingConfig";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PricingConf',
                '/s4s-pricing/pricingConfig'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PricingConf', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PricingConf', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation pricingConfigPut
     *
     * 
     *
     * @param \Swagger\Client\Model\PricingConf $a  (optional)
     * @return string
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function pricingConfigPut($a = null)
    {
        list($response) = $this->pricingConfigPutWithHttpInfo($a);
        return $response;
    }

    /**
     * Operation pricingConfigPutWithHttpInfo
     *
     * 
     *
     * @param \Swagger\Client\Model\PricingConf $a  (optional)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function pricingConfigPutWithHttpInfo($a = null)
    {
        // parse inputs
        $resourcePath = "/s4s-pricing/pricingConfig";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($a)) {
            $_tempBody = $a;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/s4s-pricing/pricingConfig'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation pricingUiConf
     *
     * 
     *
     * @return \Swagger\Client\Model\PricingUiConf
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function pricingUiConf()
    {
        list($response) = $this->pricingUiConfWithHttpInfo();
        return $response;
    }

    /**
     * Operation pricingUiConfWithHttpInfo
     *
     * 
     *
     * @return Array of \Swagger\Client\Model\PricingUiConf, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function pricingUiConfWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/s4s-pricing/pricingUiConf";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PricingUiConf',
                '/s4s-pricing/pricingUiConf'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PricingUiConf', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PricingUiConf', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation pricingUiConfigGet
     *
     * 
     *
     * @return \Swagger\Client\Model\PricingUiConf
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function pricingUiConfigGet()
    {
        list($response) = $this->pricingUiConfigGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation pricingUiConfigGetWithHttpInfo
     *
     * 
     *
     * @return Array of \Swagger\Client\Model\PricingUiConf, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function pricingUiConfigGetWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/s4s-pricing/pricingUiConfig";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\PricingUiConf',
                '/s4s-pricing/pricingUiConfig'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\PricingUiConf', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\PricingUiConf', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation pricingUiConfigPut
     *
     * 
     *
     * @param \Swagger\Client\Model\PricingUiConf $a  (optional)
     * @return string
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function pricingUiConfigPut($a = null)
    {
        list($response) = $this->pricingUiConfigPutWithHttpInfo($a);
        return $response;
    }

    /**
     * Operation pricingUiConfigPutWithHttpInfo
     *
     * 
     *
     * @param \Swagger\Client\Model\PricingUiConf $a  (optional)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function pricingUiConfigPutWithHttpInfo($a = null)
    {
        // parse inputs
        $resourcePath = "/s4s-pricing/pricingUiConfig";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($a)) {
            $_tempBody = $a;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/s4s-pricing/pricingUiConfig'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
