<?php
/**
 * Account
 *
 * PHP version 5
 *
 * @category Class
 * @package  s4s
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace s4s\model;

use \ArrayAccess;

/**
 * Account Class Doc Comment
 *
 * @category    Class */
 // @description Model description
/** 
 * @package     s4s
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Account implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Account';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'private_data' => 'map[string,string]',
        'data' => 'map[string,string]',
        'default_user_id' => 'string',
        'id' => 'string',
        'default_user' => '\s4s\model\User',
        'status' => 'string',
        'typ' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'private_data' => 'privateData',
        'data' => 'data',
        'default_user_id' => 'defaultUserId',
        'id' => 'id',
        'default_user' => 'defaultUser',
        'status' => 'status',
        'typ' => 'typ'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'private_data' => 'setPrivateData',
        'data' => 'setData',
        'default_user_id' => 'setDefaultUserId',
        'id' => 'setId',
        'default_user' => 'setDefaultUser',
        'status' => 'setStatus',
        'typ' => 'setTyp'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'private_data' => 'getPrivateData',
        'data' => 'getData',
        'default_user_id' => 'getDefaultUserId',
        'id' => 'getId',
        'default_user' => 'getDefaultUser',
        'status' => 'getStatus',
        'typ' => 'getTyp'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const STATUS_WAITING_APROVE = 'WaitingAprove';
    const STATUS_APPROVED = 'Approved';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_WAITING_APROVE,
            self::STATUS_APPROVED,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['private_data'] = isset($data['private_data']) ? $data['private_data'] : null;
        $this->container['data'] = isset($data['data']) ? $data['data'] : null;
        $this->container['default_user_id'] = isset($data['default_user_id']) ? $data['default_user_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['default_user'] = isset($data['default_user']) ? $data['default_user'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['typ'] = isset($data['typ']) ? $data['typ'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        $allowed_values = array("WaitingAprove", "Approved");
        if (!in_array($this->container['status'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'status', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = array("WaitingAprove", "Approved");
        if (!in_array($this->container['status'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets private_data
     * @return map[string,string]
     */
    public function getPrivateData()
    {
        return $this->container['private_data'];
    }

    /**
     * Sets private_data
     * @param map[string,string] $private_data
     * @return $this
     */
    public function setPrivateData($private_data)
    {
        $this->container['private_data'] = $private_data;

        return $this;
    }

    /**
     * Gets data
     * @return map[string,string]
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     * @param map[string,string] $data
     * @return $this
     */
    public function setData($data)
    {
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets default_user_id
     * @return string
     */
    public function getDefaultUserId()
    {
        return $this->container['default_user_id'];
    }

    /**
     * Sets default_user_id
     * @param string $default_user_id
     * @return $this
     */
    public function setDefaultUserId($default_user_id)
    {
        $this->container['default_user_id'] = $default_user_id;

        return $this;
    }

    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets default_user
     * @return \s4s\model\User
     */
    public function getDefaultUser()
    {
        return $this->container['default_user'];
    }

    /**
     * Sets default_user
     * @param \s4s\model\User $default_user
     * @return $this
     */
    public function setDefaultUser($default_user)
    {
        $this->container['default_user'] = $default_user;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status
     * @return $this
     */
    public function setStatus($status)
    {
        $allowed_values = array('WaitingAprove', 'Approved');
        if (!in_array($status, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'status', must be one of 'WaitingAprove', 'Approved'");
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets typ
     * @return string
     */
    public function getTyp()
    {
        return $this->container['typ'];
    }

    /**
     * Sets typ
     * @param string $typ
     * @return $this
     */
    public function setTyp($typ)
    {
        $this->container['typ'] = $typ;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\s4s\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\s4s\ObjectSerializer::sanitizeForSerialization($this));
    }
}


