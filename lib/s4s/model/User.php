<?php
/**
 * User
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace s4s\model;

use \ArrayAccess;

/**
 * User Class Doc Comment
 *
 * @category    Class */
 // @description Model description
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class User implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'User';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'private_data' => 'map[string,string]',
        'data' => 'map[string,string]',
        'account_id' => 'string',
        'contacts' => '\s4s\model\UserContact',
        'pwd' => 'string',
        'id' => 'string',
        'api_tkn' => 'string',
        'google_auth' => '\s4s\model\GoogleAuth',
        'typ' => 'string',
        'usr' => 'string',
        'tenant_id' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'private_data' => 'privateData',
        'data' => 'data',
        'account_id' => 'accountId',
        'contacts' => 'contacts',
        'pwd' => 'pwd',
        'id' => 'id',
        'api_tkn' => 'apiTkn',
        'google_auth' => 'googleAuth',
        'typ' => 'typ',
        'usr' => 'usr',
        'tenant_id' => 'tenantId'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'private_data' => 'setPrivateData',
        'data' => 'setData',
        'account_id' => 'setAccountId',
        'contacts' => 'setContacts',
        'pwd' => 'setPwd',
        'id' => 'setId',
        'api_tkn' => 'setApiTkn',
        'google_auth' => 'setGoogleAuth',
        'typ' => 'setTyp',
        'usr' => 'setUsr',
        'tenant_id' => 'setTenantId'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'private_data' => 'getPrivateData',
        'data' => 'getData',
        'account_id' => 'getAccountId',
        'contacts' => 'getContacts',
        'pwd' => 'getPwd',
        'id' => 'getId',
        'api_tkn' => 'getApiTkn',
        'google_auth' => 'getGoogleAuth',
        'typ' => 'getTyp',
        'usr' => 'getUsr',
        'tenant_id' => 'getTenantId'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['private_data'] = isset($data['private_data']) ? $data['private_data'] : null;
        $this->container['data'] = isset($data['data']) ? $data['data'] : null;
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['contacts'] = isset($data['contacts']) ? $data['contacts'] : null;
        $this->container['pwd'] = isset($data['pwd']) ? $data['pwd'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['api_tkn'] = isset($data['api_tkn']) ? $data['api_tkn'] : null;
        $this->container['google_auth'] = isset($data['google_auth']) ? $data['google_auth'] : null;
        $this->container['typ'] = isset($data['typ']) ? $data['typ'] : null;
        $this->container['usr'] = isset($data['usr']) ? $data['usr'] : null;
        $this->container['tenant_id'] = isset($data['tenant_id']) ? $data['tenant_id'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets private_data
     * @return map[string,string]
     */
    public function getPrivateData()
    {
        return $this->container['private_data'];
    }

    /**
     * Sets private_data
     * @param map[string,string] $private_data
     * @return $this
     */
    public function setPrivateData($private_data)
    {
        $this->container['private_data'] = $private_data;

        return $this;
    }

    /**
     * Gets data
     * @return map[string,string]
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     * @param map[string,string] $data
     * @return $this
     */
    public function setData($data)
    {
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets account_id
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     * @param string $account_id
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets contacts
     * @return \s4s\model\UserContact
     */
    public function getContacts()
    {
        return $this->container['contacts'];
    }

    /**
     * Sets contacts
     * @param \s4s\model\UserContact $contacts
     * @return $this
     */
    public function setContacts($contacts)
    {
        $this->container['contacts'] = $contacts;

        return $this;
    }

    /**
     * Gets pwd
     * @return string
     */
    public function getPwd()
    {
        return $this->container['pwd'];
    }

    /**
     * Sets pwd
     * @param string $pwd
     * @return $this
     */
    public function setPwd($pwd)
    {
        $this->container['pwd'] = $pwd;

        return $this;
    }

    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets api_tkn
     * @return string
     */
    public function getApiTkn()
    {
        return $this->container['api_tkn'];
    }

    /**
     * Sets api_tkn
     * @param string $api_tkn
     * @return $this
     */
    public function setApiTkn($api_tkn)
    {
        $this->container['api_tkn'] = $api_tkn;

        return $this;
    }

    /**
     * Gets google_auth
     * @return \s4s\model\GoogleAuth
     */
    public function getGoogleAuth()
    {
        return $this->container['google_auth'];
    }

    /**
     * Sets google_auth
     * @param \s4s\model\GoogleAuth $google_auth
     * @return $this
     */
    public function setGoogleAuth($google_auth)
    {
        $this->container['google_auth'] = $google_auth;

        return $this;
    }

    /**
     * Gets typ
     * @return string
     */
    public function getTyp()
    {
        return $this->container['typ'];
    }

    /**
     * Sets typ
     * @param string $typ
     * @return $this
     */
    public function setTyp($typ)
    {
        $this->container['typ'] = $typ;

        return $this;
    }

    /**
     * Gets usr
     * @return string
     */
    public function getUsr()
    {
        return $this->container['usr'];
    }

    /**
     * Sets usr
     * @param string $usr
     * @return $this
     */
    public function setUsr($usr)
    {
        $this->container['usr'] = $usr;

        return $this;
    }

    /**
     * Gets tenant_id
     * @return string
     */
    public function getTenantId()
    {
        return $this->container['tenant_id'];
    }

    /**
     * Sets tenant_id
     * @param string $tenant_id
     * @return $this
     */
    public function setTenantId($tenant_id)
    {
        $this->container['tenant_id'] = $tenant_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


