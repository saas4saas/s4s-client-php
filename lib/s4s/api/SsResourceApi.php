<?php
/**
 * SsResourceApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace s4s/api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * SsResourceApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SsResourceApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return SsResourceApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation resourceCustomerResourceGet
     *
     * 
     *
     * @param string $customer_id  (required)
     * @param string $resourceid  (required)
     * @return int
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function resourceCustomerResourceGet($customer_id, $resourceid)
    {
        list($response) = $this->resourceCustomerResourceGetWithHttpInfo($customer_id, $resourceid);
        return $response;
    }

    /**
     * Operation resourceCustomerResourceGetWithHttpInfo
     *
     * 
     *
     * @param string $customer_id  (required)
     * @param string $resourceid  (required)
     * @return Array of int, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function resourceCustomerResourceGetWithHttpInfo($customer_id, $resourceid)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling resourceCustomerResourceGet');
        }
        // verify the required parameter 'resourceid' is set
        if ($resourceid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $resourceid when calling resourceCustomerResourceGet');
        }
        // parse inputs
        $resourcePath = "/s4s-pricing/resource/customer/{customer-id}/resource/{resourceid}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // path params
        if ($resourceid !== null) {
            $resourcePath = str_replace(
                "{" . "resourceid" . "}",
                $this->apiClient->getSerializer()->toPathValue($resourceid),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'int',
                '/s4s-pricing/resource/customer/{customer-id}/resource/{resourceid}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'int', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'int', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\s4s/model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation resourceCustomerResourceLimitGet
     *
     * 
     *
     * @param string $customer_id  (required)
     * @param string $resourceid  (required)
     * @return int
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function resourceCustomerResourceLimitGet($customer_id, $resourceid)
    {
        list($response) = $this->resourceCustomerResourceLimitGetWithHttpInfo($customer_id, $resourceid);
        return $response;
    }

    /**
     * Operation resourceCustomerResourceLimitGetWithHttpInfo
     *
     * 
     *
     * @param string $customer_id  (required)
     * @param string $resourceid  (required)
     * @return Array of int, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function resourceCustomerResourceLimitGetWithHttpInfo($customer_id, $resourceid)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling resourceCustomerResourceLimitGet');
        }
        // verify the required parameter 'resourceid' is set
        if ($resourceid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $resourceid when calling resourceCustomerResourceLimitGet');
        }
        // parse inputs
        $resourcePath = "/s4s-pricing/resource/customer/{customer-id}/resource/{resourceid}/limit";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // path params
        if ($resourceid !== null) {
            $resourcePath = str_replace(
                "{" . "resourceid" . "}",
                $this->apiClient->getSerializer()->toPathValue($resourceid),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'int',
                '/s4s-pricing/resource/customer/{customer-id}/resource/{resourceid}/limit'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'int', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'int', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\s4s/model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation resourceCustomerResourcePatch
     *
     * 
     *
     * @param string $customer_id  (required)
     * @param string $resourceid  (required)
     * @param \s4s/model\ResourcePatch $value The Operation and value to update the resource (optional)
     * @return \s4s/model\ResourcePatchResult
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function resourceCustomerResourcePatch($customer_id, $resourceid, $value = null)
    {
        list($response) = $this->resourceCustomerResourcePatchWithHttpInfo($customer_id, $resourceid, $value);
        return $response;
    }

    /**
     * Operation resourceCustomerResourcePatchWithHttpInfo
     *
     * 
     *
     * @param string $customer_id  (required)
     * @param string $resourceid  (required)
     * @param \s4s/model\ResourcePatch $value The Operation and value to update the resource (optional)
     * @return Array of \s4s/model\ResourcePatchResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function resourceCustomerResourcePatchWithHttpInfo($customer_id, $resourceid, $value = null)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling resourceCustomerResourcePatch');
        }
        // verify the required parameter 'resourceid' is set
        if ($resourceid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $resourceid when calling resourceCustomerResourcePatch');
        }
        // parse inputs
        $resourcePath = "/s4s-pricing/resource/customer/{customer-id}/resource/{resourceid}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // path params
        if ($resourceid !== null) {
            $resourcePath = str_replace(
                "{" . "resourceid" . "}",
                $this->apiClient->getSerializer()->toPathValue($resourceid),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($value)) {
            $_tempBody = $value;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\s4s/model\ResourcePatchResult',
                '/s4s-pricing/resource/customer/{customer-id}/resource/{resourceid}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\s4s/model\ResourcePatchResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\s4s/model\ResourcePatchResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\s4s/model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation resourceCustomerResourceProductGet
     *
     * 
     *
     * @param string $customer_id  (required)
     * @param string $resourceid  (required)
     * @param string $customer_product_id  (required)
     * @return int
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function resourceCustomerResourceProductGet($customer_id, $resourceid, $customer_product_id)
    {
        list($response) = $this->resourceCustomerResourceProductGetWithHttpInfo($customer_id, $resourceid, $customer_product_id);
        return $response;
    }

    /**
     * Operation resourceCustomerResourceProductGetWithHttpInfo
     *
     * 
     *
     * @param string $customer_id  (required)
     * @param string $resourceid  (required)
     * @param string $customer_product_id  (required)
     * @return Array of int, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function resourceCustomerResourceProductGetWithHttpInfo($customer_id, $resourceid, $customer_product_id)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling resourceCustomerResourceProductGet');
        }
        // verify the required parameter 'resourceid' is set
        if ($resourceid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $resourceid when calling resourceCustomerResourceProductGet');
        }
        // verify the required parameter 'customer_product_id' is set
        if ($customer_product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_product_id when calling resourceCustomerResourceProductGet');
        }
        // parse inputs
        $resourcePath = "/s4s-pricing/resource/customer/{customer-id}/resource/{resourceid}/product/{customer-product-id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // path params
        if ($resourceid !== null) {
            $resourcePath = str_replace(
                "{" . "resourceid" . "}",
                $this->apiClient->getSerializer()->toPathValue($resourceid),
                $resourcePath
            );
        }
        // path params
        if ($customer_product_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-product-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'int',
                '/s4s-pricing/resource/customer/{customer-id}/resource/{resourceid}/product/{customer-product-id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'int', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'int', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\s4s/model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation resourceCustomerResourceUnspendDel
     *
     * 
     *
     * @param string $customer_id  (required)
     * @param string $resourceid  (required)
     * @param bool $also_delete_limit  (required)
     * @return string
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function resourceCustomerResourceUnspendDel($customer_id, $resourceid, $also_delete_limit)
    {
        list($response) = $this->resourceCustomerResourceUnspendDelWithHttpInfo($customer_id, $resourceid, $also_delete_limit);
        return $response;
    }

    /**
     * Operation resourceCustomerResourceUnspendDelWithHttpInfo
     *
     * 
     *
     * @param string $customer_id  (required)
     * @param string $resourceid  (required)
     * @param bool $also_delete_limit  (required)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function resourceCustomerResourceUnspendDelWithHttpInfo($customer_id, $resourceid, $also_delete_limit)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling resourceCustomerResourceUnspendDel');
        }
        // verify the required parameter 'resourceid' is set
        if ($resourceid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $resourceid when calling resourceCustomerResourceUnspendDel');
        }
        // verify the required parameter 'also_delete_limit' is set
        if ($also_delete_limit === null) {
            throw new \InvalidArgumentException('Missing the required parameter $also_delete_limit when calling resourceCustomerResourceUnspendDel');
        }
        // parse inputs
        $resourcePath = "/s4s-pricing/resource/customer/{customer-id}/resource/{resourceid}/unspend";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($also_delete_limit !== null) {
            $queryParams['also-delete-limit'] = $this->apiClient->getSerializer()->toQueryValue($also_delete_limit);
        }
        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // path params
        if ($resourceid !== null) {
            $resourcePath = str_replace(
                "{" . "resourceid" . "}",
                $this->apiClient->getSerializer()->toPathValue($resourceid),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/s4s-pricing/resource/customer/{customer-id}/resource/{resourceid}/unspend'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\s4s/model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation resourceCustomerResourceUnspendGet
     *
     * 
     *
     * @param string $customer_id  (required)
     * @param string $resourceid  (required)
     * @return int
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function resourceCustomerResourceUnspendGet($customer_id, $resourceid)
    {
        list($response) = $this->resourceCustomerResourceUnspendGetWithHttpInfo($customer_id, $resourceid);
        return $response;
    }

    /**
     * Operation resourceCustomerResourceUnspendGetWithHttpInfo
     *
     * 
     *
     * @param string $customer_id  (required)
     * @param string $resourceid  (required)
     * @return Array of int, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function resourceCustomerResourceUnspendGetWithHttpInfo($customer_id, $resourceid)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling resourceCustomerResourceUnspendGet');
        }
        // verify the required parameter 'resourceid' is set
        if ($resourceid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $resourceid when calling resourceCustomerResourceUnspendGet');
        }
        // parse inputs
        $resourcePath = "/s4s-pricing/resource/customer/{customer-id}/resource/{resourceid}/unspend";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // path params
        if ($resourceid !== null) {
            $resourcePath = str_replace(
                "{" . "resourceid" . "}",
                $this->apiClient->getSerializer()->toPathValue($resourceid),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'int',
                '/s4s-pricing/resource/customer/{customer-id}/resource/{resourceid}/unspend'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'int', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'int', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\s4s/model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation resourceCustomerResourceUnspendPatch
     *
     * 
     *
     * @param string $customer_id  (required)
     * @param string $resourceid  (required)
     * @param \s4s/model\ResourcePatch $value  (optional)
     * @return \s4s/model\ResourcePatchResult
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function resourceCustomerResourceUnspendPatch($customer_id, $resourceid, $value = null)
    {
        list($response) = $this->resourceCustomerResourceUnspendPatchWithHttpInfo($customer_id, $resourceid, $value);
        return $response;
    }

    /**
     * Operation resourceCustomerResourceUnspendPatchWithHttpInfo
     *
     * 
     *
     * @param string $customer_id  (required)
     * @param string $resourceid  (required)
     * @param \s4s/model\ResourcePatch $value  (optional)
     * @return Array of \s4s/model\ResourcePatchResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function resourceCustomerResourceUnspendPatchWithHttpInfo($customer_id, $resourceid, $value = null)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling resourceCustomerResourceUnspendPatch');
        }
        // verify the required parameter 'resourceid' is set
        if ($resourceid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $resourceid when calling resourceCustomerResourceUnspendPatch');
        }
        // parse inputs
        $resourcePath = "/s4s-pricing/resource/customer/{customer-id}/resource/{resourceid}/unspend";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // path params
        if ($resourceid !== null) {
            $resourcePath = str_replace(
                "{" . "resourceid" . "}",
                $this->apiClient->getSerializer()->toPathValue($resourceid),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($value)) {
            $_tempBody = $value;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\s4s/model\ResourcePatchResult',
                '/s4s-pricing/resource/customer/{customer-id}/resource/{resourceid}/unspend'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\s4s/model\ResourcePatchResult', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\s4s/model\ResourcePatchResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\s4s/model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation resourceCustomerUpdateLimits
     *
     * 
     *
     * @param string $customer_id  (required)
     * @return string
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function resourceCustomerUpdateLimits($customer_id)
    {
        list($response) = $this->resourceCustomerUpdateLimitsWithHttpInfo($customer_id);
        return $response;
    }

    /**
     * Operation resourceCustomerUpdateLimitsWithHttpInfo
     *
     * 
     *
     * @param string $customer_id  (required)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function resourceCustomerUpdateLimitsWithHttpInfo($customer_id)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling resourceCustomerUpdateLimits');
        }
        // parse inputs
        $resourcePath = "/s4s-pricing/resource/customer/{customer-id}/updateLimits";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/s4s-pricing/resource/customer/{customer-id}/updateLimits'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\s4s/model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
