<?php
/**
 * SsPaymentApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace s4s/api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * SsPaymentApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SsPaymentApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return SsPaymentApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation paymentCustomerInfoCurrency
     *
     * 
     *
     * @param string $customer_id  (required)
     * @param string $currency  (required)
     * @return string
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function paymentCustomerInfoCurrency($customer_id, $currency)
    {
        list($response) = $this->paymentCustomerInfoCurrencyWithHttpInfo($customer_id, $currency);
        return $response;
    }

    /**
     * Operation paymentCustomerInfoCurrencyWithHttpInfo
     *
     * 
     *
     * @param string $customer_id  (required)
     * @param string $currency  (required)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function paymentCustomerInfoCurrencyWithHttpInfo($customer_id, $currency)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling paymentCustomerInfoCurrency');
        }
        // verify the required parameter 'currency' is set
        if ($currency === null) {
            throw new \InvalidArgumentException('Missing the required parameter $currency when calling paymentCustomerInfoCurrency');
        }
        // parse inputs
        $resourcePath = "/s4s-pricing/payment/customer/{customer-id}/info/currency";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($currency !== null) {
            $queryParams['currency'] = $this->apiClient->getSerializer()->toQueryValue($currency);
        }
        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/s4s-pricing/payment/customer/{customer-id}/info/currency'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\s4s/model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation paymentCustomerInfoGet
     *
     * 
     *
     * @param string $customer_id  (required)
     * @return \s4s/model\CustomerInfo
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function paymentCustomerInfoGet($customer_id)
    {
        list($response) = $this->paymentCustomerInfoGetWithHttpInfo($customer_id);
        return $response;
    }

    /**
     * Operation paymentCustomerInfoGetWithHttpInfo
     *
     * 
     *
     * @param string $customer_id  (required)
     * @return Array of \s4s/model\CustomerInfo, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function paymentCustomerInfoGetWithHttpInfo($customer_id)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling paymentCustomerInfoGet');
        }
        // parse inputs
        $resourcePath = "/s4s-pricing/payment/customer/{customer-id}/info";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\s4s/model\CustomerInfo',
                '/s4s-pricing/payment/customer/{customer-id}/info'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\s4s/model\CustomerInfo', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\s4s/model\CustomerInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\s4s/model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation paymentCustomerInfoHasPaymentInfo
     *
     * 
     *
     * @param string $customer_id  (required)
     * @return bool
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function paymentCustomerInfoHasPaymentInfo($customer_id)
    {
        list($response) = $this->paymentCustomerInfoHasPaymentInfoWithHttpInfo($customer_id);
        return $response;
    }

    /**
     * Operation paymentCustomerInfoHasPaymentInfoWithHttpInfo
     *
     * 
     *
     * @param string $customer_id  (required)
     * @return Array of bool, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function paymentCustomerInfoHasPaymentInfoWithHttpInfo($customer_id)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling paymentCustomerInfoHasPaymentInfo');
        }
        // parse inputs
        $resourcePath = "/s4s-pricing/payment/customer/{customer-id}/info/hasPaymentInfo";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'bool',
                '/s4s-pricing/payment/customer/{customer-id}/info/hasPaymentInfo'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'bool', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'bool', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\s4s/model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation paymentCustomerInfoStripeCustomer
     *
     * 
     *
     * @param string $customer_id  (required)
     * @param \s4s/model\StripeCustomer $stripe_customer  (optional)
     * @return string
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function paymentCustomerInfoStripeCustomer($customer_id, $stripe_customer = null)
    {
        list($response) = $this->paymentCustomerInfoStripeCustomerWithHttpInfo($customer_id, $stripe_customer);
        return $response;
    }

    /**
     * Operation paymentCustomerInfoStripeCustomerWithHttpInfo
     *
     * 
     *
     * @param string $customer_id  (required)
     * @param \s4s/model\StripeCustomer $stripe_customer  (optional)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function paymentCustomerInfoStripeCustomerWithHttpInfo($customer_id, $stripe_customer = null)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling paymentCustomerInfoStripeCustomer');
        }
        // parse inputs
        $resourcePath = "/s4s-pricing/payment/customer/{customer-id}/info/stripeCustomer";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($stripe_customer)) {
            $_tempBody = $stripe_customer;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/s4s-pricing/payment/customer/{customer-id}/info/stripeCustomer'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\s4s/model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation paymentCustomerPaymentAdd
     *
     * 
     *
     * @param string $customer_id  (required)
     * @param \s4s/model\PaymentRequest $payment_request  (optional)
     * @return \s4s/model\PaymentRequest
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function paymentCustomerPaymentAdd($customer_id, $payment_request = null)
    {
        list($response) = $this->paymentCustomerPaymentAddWithHttpInfo($customer_id, $payment_request);
        return $response;
    }

    /**
     * Operation paymentCustomerPaymentAddWithHttpInfo
     *
     * 
     *
     * @param string $customer_id  (required)
     * @param \s4s/model\PaymentRequest $payment_request  (optional)
     * @return Array of \s4s/model\PaymentRequest, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function paymentCustomerPaymentAddWithHttpInfo($customer_id, $payment_request = null)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling paymentCustomerPaymentAdd');
        }
        // parse inputs
        $resourcePath = "/s4s-pricing/payment/customer/{customer-id}/payment";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($payment_request)) {
            $_tempBody = $payment_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\s4s/model\PaymentRequest',
                '/s4s-pricing/payment/customer/{customer-id}/payment'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\s4s/model\PaymentRequest', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\s4s/model\PaymentRequest', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\s4s/model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation paymentCustomerPaymentCancelPatch
     *
     * 
     *
     * @param string $customer_id  (required)
     * @param string $payment_id  (required)
     * @return string
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function paymentCustomerPaymentCancelPatch($customer_id, $payment_id)
    {
        list($response) = $this->paymentCustomerPaymentCancelPatchWithHttpInfo($customer_id, $payment_id);
        return $response;
    }

    /**
     * Operation paymentCustomerPaymentCancelPatchWithHttpInfo
     *
     * 
     *
     * @param string $customer_id  (required)
     * @param string $payment_id  (required)
     * @return Array of string, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function paymentCustomerPaymentCancelPatchWithHttpInfo($customer_id, $payment_id)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling paymentCustomerPaymentCancelPatch');
        }
        // verify the required parameter 'payment_id' is set
        if ($payment_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $payment_id when calling paymentCustomerPaymentCancelPatch');
        }
        // parse inputs
        $resourcePath = "/s4s-pricing/payment/customer/{customer-id}/payment/{payment-id}/cancel";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // path params
        if ($payment_id !== null) {
            $resourcePath = str_replace(
                "{" . "payment-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($payment_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/s4s-pricing/payment/customer/{customer-id}/payment/{payment-id}/cancel'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\s4s/model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation paymentCustomerPaymentGetAll
     *
     * 
     *
     * @param string $customer_id  (required)
     * @return string[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function paymentCustomerPaymentGetAll($customer_id)
    {
        list($response) = $this->paymentCustomerPaymentGetAllWithHttpInfo($customer_id);
        return $response;
    }

    /**
     * Operation paymentCustomerPaymentGetAllWithHttpInfo
     *
     * 
     *
     * @param string $customer_id  (required)
     * @return Array of string[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function paymentCustomerPaymentGetAllWithHttpInfo($customer_id)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling paymentCustomerPaymentGetAll');
        }
        // parse inputs
        $resourcePath = "/s4s-pricing/payment/customer/{customer-id}/payment";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string[]',
                '/s4s-pricing/payment/customer/{customer-id}/payment'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\s4s/model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation paymentCustomerPaymentPayPatch
     *
     * 
     *
     * @param string $customer_id  (required)
     * @param string $payment_id  (required)
     * @return \s4s/model\PaymentRequest
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function paymentCustomerPaymentPayPatch($customer_id, $payment_id)
    {
        list($response) = $this->paymentCustomerPaymentPayPatchWithHttpInfo($customer_id, $payment_id);
        return $response;
    }

    /**
     * Operation paymentCustomerPaymentPayPatchWithHttpInfo
     *
     * 
     *
     * @param string $customer_id  (required)
     * @param string $payment_id  (required)
     * @return Array of \s4s/model\PaymentRequest, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function paymentCustomerPaymentPayPatchWithHttpInfo($customer_id, $payment_id)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling paymentCustomerPaymentPayPatch');
        }
        // verify the required parameter 'payment_id' is set
        if ($payment_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $payment_id when calling paymentCustomerPaymentPayPatch');
        }
        // parse inputs
        $resourcePath = "/s4s-pricing/payment/customer/{customer-id}/payment/{payment-id}/pay";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // path params
        if ($payment_id !== null) {
            $resourcePath = str_replace(
                "{" . "payment-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($payment_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\s4s/model\PaymentRequest',
                '/s4s-pricing/payment/customer/{customer-id}/payment/{payment-id}/pay'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\s4s/model\PaymentRequest', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\s4s/model\PaymentRequest', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\s4s/model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation paymentCustomerPaymentValues
     *
     * 
     *
     * @param string $customer_id  (required)
     * @param int $page  (required)
     * @param int $number_per_page  (required)
     * @return \s4s/model\DataListPaymentRequest
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function paymentCustomerPaymentValues($customer_id, $page, $number_per_page)
    {
        list($response) = $this->paymentCustomerPaymentValuesWithHttpInfo($customer_id, $page, $number_per_page);
        return $response;
    }

    /**
     * Operation paymentCustomerPaymentValuesWithHttpInfo
     *
     * 
     *
     * @param string $customer_id  (required)
     * @param int $page  (required)
     * @param int $number_per_page  (required)
     * @return Array of \s4s/model\DataListPaymentRequest, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function paymentCustomerPaymentValuesWithHttpInfo($customer_id, $page, $number_per_page)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling paymentCustomerPaymentValues');
        }
        // verify the required parameter 'page' is set
        if ($page === null) {
            throw new \InvalidArgumentException('Missing the required parameter $page when calling paymentCustomerPaymentValues');
        }
        // verify the required parameter 'number_per_page' is set
        if ($number_per_page === null) {
            throw new \InvalidArgumentException('Missing the required parameter $number_per_page when calling paymentCustomerPaymentValues');
        }
        // parse inputs
        $resourcePath = "/s4s-pricing/payment/customer/{customer-id}/payment/values";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($number_per_page !== null) {
            $queryParams['number-per-page'] = $this->apiClient->getSerializer()->toQueryValue($number_per_page);
        }
        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                "{" . "customer-id" . "}",
                $this->apiClient->getSerializer()->toPathValue($customer_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\s4s/model\DataListPaymentRequest',
                '/s4s-pricing/payment/customer/{customer-id}/payment/values'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\s4s/model\DataListPaymentRequest', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\s4s/model\DataListPaymentRequest', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\s4s/model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation paymentPaymentGetAll
     *
     * 
     *
     * @param int $page  (required)
     * @param int $number_per_page  (required)
     * @return \s4s/model\DataListPaymentRequest
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function paymentPaymentGetAll($page, $number_per_page)
    {
        list($response) = $this->paymentPaymentGetAllWithHttpInfo($page, $number_per_page);
        return $response;
    }

    /**
     * Operation paymentPaymentGetAllWithHttpInfo
     *
     * 
     *
     * @param int $page  (required)
     * @param int $number_per_page  (required)
     * @return Array of \s4s/model\DataListPaymentRequest, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function paymentPaymentGetAllWithHttpInfo($page, $number_per_page)
    {
        // verify the required parameter 'page' is set
        if ($page === null) {
            throw new \InvalidArgumentException('Missing the required parameter $page when calling paymentPaymentGetAll');
        }
        // verify the required parameter 'number_per_page' is set
        if ($number_per_page === null) {
            throw new \InvalidArgumentException('Missing the required parameter $number_per_page when calling paymentPaymentGetAll');
        }
        // parse inputs
        $resourcePath = "/s4s-pricing/payment/payment";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($number_per_page !== null) {
            $queryParams['number-per-page'] = $this->apiClient->getSerializer()->toQueryValue($number_per_page);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('tenantid');
        if (strlen($apiKey) !== 0) {
            $queryParams['tenantid'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('token');
        if (strlen($apiKey) !== 0) {
            $queryParams['token'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\s4s/model\DataListPaymentRequest',
                '/s4s-pricing/payment/payment'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\s4s/model\DataListPaymentRequest', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\s4s/model\DataListPaymentRequest', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\s4s/model\S4sError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
